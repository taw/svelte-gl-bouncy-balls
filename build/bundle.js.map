{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../node_modules/@sveltejs/gl/internal/index.mjs","../../node_modules/@sveltejs/gl/internal/utils.mjs","../../node_modules/gl-matrix/esm/common.js","../../node_modules/gl-matrix/esm/mat4.js","../../node_modules/gl-matrix/esm/vec3.js","../../node_modules/@sveltejs/gl/scene/Scene.svelte","../../node_modules/gl-matrix/esm/vec4.js","../../node_modules/gl-matrix/esm/quat.js","../../node_modules/gl-matrix/esm/mat3.js","../../node_modules/@sveltejs/gl/scene/Group.svelte","../../node_modules/@sveltejs/gl/scene/Mesh/program.mjs","../../node_modules/@sveltejs/gl/scene/Mesh/Material.mjs","../../node_modules/@sveltejs/gl/scene/Mesh/index.svelte","../../node_modules/@sveltejs/gl/scene/Target.svelte","../../node_modules/@sveltejs/gl/scene/lights/AmbientLight.svelte","../../node_modules/@sveltejs/gl/scene/lights/DirectionalLight.svelte","../../node_modules/@sveltejs/gl/scene/lights/PointLight.svelte","../../node_modules/yootils/yootils.es.js","../../node_modules/@sveltejs/gl/controls/debounce.js","../../node_modules/@sveltejs/gl/controls/OrbitControls.svelte","../../node_modules/@sveltejs/gl/scene/cameras/PerspectiveCamera.svelte","../../node_modules/@sveltejs/gl/geometry/Geometry.mjs","../../node_modules/@sveltejs/gl/geometry/plane.mjs","../../node_modules/@sveltejs/gl/geometry/icosphere.mjs","../../node_modules/@sveltejs/gl/geometry/sphere.mjs","../../node_modules/@sveltejs/gl/internal/image.mjs","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? undefined : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    const z_index = (parseInt(computed_style.zIndex) || 0) - 1;\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', `display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ` +\n        `overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: ${z_index};`);\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = `data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>`;\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error(`Function called outside component initialization`);\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            info.blocks[i] = null;\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error(`Cannot have duplicate keys in a keyed each`);\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += \" \" + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += \" \" + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : ``;\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const prop_values = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, prop_values, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.24.1' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev(\"SvelteDOMInsert\", { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev(\"SvelteDOMRemove\", { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? [\"capture\"] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev(\"SvelteDOMAddEventListener\", { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev(\"SvelteDOMRemoveEventListener\", { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev(\"SvelteDOMRemoveAttribute\", { node, attribute });\n    else\n        dispatch_dev(\"SvelteDOMSetAttribute\", { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev(\"SvelteDOMSetProperty\", { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev(\"SvelteDOMSetDataset\", { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev(\"SvelteDOMSetData\", { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(`'target' is a required option`);\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn(`Component was already destroyed`); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error(`Infinite loop detected`);\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, update_slot, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal';\nexport { get_store_value as get } from '../internal';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe,\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { getContext, setContext, onDestroy } from 'svelte';\n\nexport const RENDERER = {};\nexport const LAYER = {};\nexport const PARENT = {};\nexport const CAMERA = {};\n\nexport function get_scene() {\n  return getContext(RENDERER);\n}\n\nexport function get_layer() {\n  return getContext(LAYER);\n}\n\nexport function get_parent() {\n  return getContext(PARENT);\n}\n\nexport function get_camera() {\n  return getContext(CAMERA);\n}\n\nexport function set_layer(layer) {\n  setContext(LAYER, layer);\n}\n\nexport function set_parent(parent) {\n  setContext(PARENT, parent);\n}\n\nfunction remove_index(array, index) {\n  array[index] = array[array.length - 1];\n  array.pop();\n}\n\nfunction remove_item(array, item) {\n  const index = array.indexOf(item);\n  if (~index) remove_index(array, index);\n}\n\nexport function create_layer(index, invalidate) {\n  let child_index = 0;\n\n  const meshes = [];\n  const transparent_meshes = [];\n  const child_layers = [];\n\n  const layer = {\n    index: 0,\n    meshes,\n    transparent_meshes,\n    child_layers,\n    needs_sort: false,\n    needs_transparency_sort: true,\n    add_mesh: (mesh, existing) => {\n      if (existing) {\n        remove_item(mesh.transparent ? meshes : transparent_meshes, mesh);\n      }\n\n      if (mesh.transparent) {\n        transparent_meshes.push(mesh);\n        layer.needs_transparency_sort = true;\n      } else {\n        meshes.push(mesh);\n      }\n\n      onDestroy(() => {\n        remove_item(meshes, mesh);\n        remove_item(transparent_meshes, mesh);\n        invalidate();\n      });\n    },\n    add_child: (index = child_index++) => {\n      const child_layer = create_layer(index, invalidate);\n      child_layers.push(child_layer);\n\n      layer.needs_sort = true;\n\n      onDestroy(() => {\n        remove_item(child_layers, child_layer);\n\n        layer.needs_sort = true;\n        invalidate();\n      });\n\n      return child_layer;\n    }\n  };\n\n  return layer;\n}\n","export function process_color(color) {\n  if (typeof color === 'number') {\n    const r = (color & 0xff0000) >> 16;\n    const g = (color & 0x00ff00) >> 8;\n    const b = (color & 0x0000ff);\n\n    return new Float32Array([\n      r / 255,\n      g / 255,\n      b / 255\n    ]);\n  }\n\n  return color;\n}\n\nexport function normalize(out, vector = out) {\n  let total = 0;\n  for (let i = 0; i < vector.length; i += 1) {\n    total += vector[i] * vector[i];\n  }\n\n  const mag = Math.sqrt(total);\n\n  out[0] = vector[0] / mag;\n  out[1] = vector[1] / mag;\n  out[2] = vector[2] / mag;\n\n  return out;\n}\n\nexport function create_worker(url, fn) {\n  const worker = new Worker(url);\n  const code = fn.toString().replace(/^(function.+?|.+?=>\\s*)\\{/g, '').slice(0, -1);\n\n  worker.postMessage(code);\n\n  return worker;\n}\n\nexport function memoize(fn) {\n  const cache = new Map();\n  return (...args) => {\n    const hash = JSON.stringify(args);\n    if (!cache.has(hash)) cache.set(hash, fn(...args));\n    return cache.get(hash);\n  };\n}\n","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","<script context=\"module\">\n  import { readable } from 'svelte/store';\n\n  function is_intersecting(el) {\n    // TODO this shouldn't be necessary. But the initial value\n    // of entry.isIntersecting in an IO can be incorrect, it\n    // turns out? need to investigate further\n    const bcr = el.getBoundingClientRect();\n\n    return (\n      bcr.bottom > 0 &&\n      bcr.right  > 0 &&\n      bcr.top    < window.innerHeight &&\n      bcr.left   < window.innerWidth\n    );\n  }\n\n  function get_visibility(node) {\n    return readable(false, set => {\n      if (typeof IntersectionObserver !== 'undefined') {\n        const observer = new IntersectionObserver(entries => {\n          // set(entries[0].isIntersecting);\n          set(is_intersecting(node));\n        });\n\n        observer.observe(node);\n        return () => observer.unobserve(node);\n      }\n\n      if (typeof window !== 'undefined') {\n        function handler() {\n          const { top, bottom } = node.getBoundingClientRect();\n          set(bottom > 0 && top < window.innerHeight);\n        }\n\n        window.addEventListener('scroll', handler);\n        window.addEventListener('resize', handler);\n\n        return () => {\n          window.removeEventListener('scroll', handler);\n          window.removeEventListener('resize', handler);\n        };\n      }\n    });\n  }\n</script>\n\n<script>\n  import { setContext, onMount, onDestroy, tick } from 'svelte';\n  import { writable } from 'svelte/store';\n  import { RENDERER, LAYER, PARENT, CAMERA, create_layer } from '../internal/index.mjs';\n  import { create_worker, process_color } from '../internal/utils.mjs';\n  import * as mat4 from 'gl-matrix/mat4';\n  import * as vec3 from 'gl-matrix/vec3';\n\n  export let background = [1, 1, 1];\n  export let backgroundOpacity = 1;\n  export let fog = undefined;\n  export let pixelRatio = undefined;\n\n  const use_fog = 'fog' in $$props;\n\n  $: bg = process_color(background);\n\n  let canvas;\n  let visible = writable(false);\n  let pending = false;\n  let update_scheduled = false;\n  let w;\n  let h;\n\n  let gl;\n  let draw = () => {};\n  let camera_stores = {\n    camera_matrix: writable(),\n    view: writable(),\n    projection: writable()\n  };\n\n  const invalidate = typeof window !== 'undefined'\n    ? () => {\n      if (!update_scheduled) {\n        update_scheduled = true;\n        requestAnimationFrame(draw);\n      }\n    }\n    : () => {};\n\n  const width = writable(1);\n  const height = writable(1);\n\n  const root_layer = create_layer(0, invalidate);\n\n  const default_camera = { /* TODO */ };\n  let camera = default_camera;\n  const num_lights = 8;\n\n  const meshes = [];\n\n  // lights\n  const lights = {\n    ambient: [],\n    directional: [],\n    point: []\n  };\n\n  function add_to(array) {\n    return fn => {\n      array.push(fn);\n      invalidate();\n\n      onDestroy(() => {\n        const i = array.indexOf(fn);\n        if (~i) array.splice(i, 1);\n        invalidate();\n      });\n    }\n  }\n\n  const targets = new Map();\n  let camera_position_changed_since_last_render = true;\n\n  const scene = {\n    defines: [\n      `#define NUM_LIGHTS 2\\n` + // TODO configure this\n      `#define USE_FOG ${use_fog}\\n`\n    ].join(''),\n\n    add_camera: _camera => {\n      if (camera && camera !== default_camera) {\n        throw new Error(`A scene can only have one camera`);\n      }\n\n      camera = _camera;\n      invalidate();\n\n      // TODO this is garbage\n      camera_stores.camera_matrix.set(camera.matrix);\n      camera_stores.projection.set(camera.projection);\n      camera_stores.view.set(camera.view);\n\n      onDestroy(() => {\n        camera = default_camera;\n        invalidate();\n      });\n    },\n\n    update_camera: camera => {\n      // for overlays\n      camera_stores.camera_matrix.set(camera.matrix);\n      camera_stores.view.set(camera.view);\n      camera_stores.projection.set(camera.projection);\n\n      camera_position_changed_since_last_render = true;\n      invalidate();\n    },\n\n    add_directional_light: add_to(lights.directional),\n    add_point_light: add_to(lights.point),\n    add_ambient_light: add_to(lights.ambient),\n\n    get_target(id) {\n      if (!targets.has(id)) targets.set(id, writable(null))\n      return targets.get(id);\n    },\n\n    invalidate,\n\n    ...camera_stores,\n\n    width,\n    height\n  };\n\n  setContext(RENDERER, scene);\n  setContext(LAYER, root_layer);\n\n  const origin = mat4.identity(mat4.create());\n  const ctm = writable(origin);\n  setContext(PARENT, {\n    get_matrix_world: () => origin,\n    ctm: { subscribe: ctm.subscribe }\n  });\n\n  onMount(() => {\n    scene.canvas = canvas;\n    gl = scene.gl = canvas.getContext('webgl');\n    visible = get_visibility(canvas);\n\n    const extensions = [\n      'OES_element_index_uint',\n      'OES_standard_derivatives'\n    ];\n\n    extensions.forEach(name => {\n      const ext = gl.getExtension(name);\n      if (!ext) {\n        throw new Error(`Unsupported extension: ${name}`);\n      }\n    });\n\n    draw = force => {\n      if (!camera) return; // TODO make this `!ready` or something instead\n\n      if (dimensions_need_update) {\n        const DPR = pixelRatio || window.devicePixelRatio || 1;\n        canvas.width = $width * DPR;\n        canvas.height = $height * DPR;\n        gl.viewport(0, 0, $width * DPR, $height * DPR);\n\n        dimensions_need_update = false;\n      }\n\n      update_scheduled = false;\n\n      if (!$visible && !force) {\n        pending = true;\n        return;\n      };\n\n      pending = false;\n\n      gl.clearColor(...bg, backgroundOpacity);\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n      gl.enable(gl.CULL_FACE);\n      gl.enable(gl.BLEND);\n\n      // calculate total ambient light\n      const ambient_light = lights.ambient.reduce((total, { color, intensity }) => {\n        return [\n          Math.min(total[0] + color[0] * intensity, 1),\n          Math.min(total[1] + color[1] * intensity, 1),\n          Math.min(total[2] + color[2] * intensity, 1)\n        ];\n      }, new Float32Array([0, 0, 0]));\n\n      let previous_program;\n\n      let previous_state = {\n        [gl.DEPTH_TEST]: null,\n        [gl.CULL_FACE]: null\n      };\n\n      const enable = (key, enabled) => {\n        if (previous_state[key] !== enabled) {\n          if (enabled) gl.enable(key);\n          else gl.disable(key);\n\n          previous_state[key] = enabled;\n        }\n      };\n\n      function render_mesh({\n        model,\n        model_inverse_transpose,\n        geometry,\n        material,\n        depthTest,\n        doubleSided\n      }) {\n        // TODO should this even be possible?\n        if (!material) return;\n\n        enable(gl.DEPTH_TEST, depthTest !== false);\n        enable(gl.CULL_FACE, doubleSided !== true);\n\n        gl.blendFuncSeparate(\n          gl.SRC_ALPHA, // source rgb\n          gl.ONE_MINUS_SRC_ALPHA, // dest rgb\n          gl.SRC_ALPHA, // source alpha\n          gl.ONE // dest alpha\n        );\n\n        if (material.program !== previous_program) {\n          previous_program = material.program;\n\n          // TODO move logic to the mesh/material?\n          gl.useProgram(material.program);\n\n          // set built-ins\n          gl.uniform3fv(material.uniform_locations.AMBIENT_LIGHT, ambient_light);\n\n          if (use_fog) {\n            gl.uniform3fv(material.uniform_locations.FOG_COLOR, bg);\n            gl.uniform1f(material.uniform_locations.FOG_DENSITY, fog);\n          }\n\n          if (material.uniform_locations.DIRECTIONAL_LIGHTS) {\n            for (let i = 0; i < num_lights; i += 1) {\n              const light = lights.directional[i];\n              if (!light) break;\n\n              gl.uniform3fv(material.uniform_locations.DIRECTIONAL_LIGHTS[i].direction, light.direction);\n              gl.uniform3fv(material.uniform_locations.DIRECTIONAL_LIGHTS[i].color, light.color);\n              gl.uniform1f(material.uniform_locations.DIRECTIONAL_LIGHTS[i].intensity, light.intensity);\n            }\n          }\n\n          if (material.uniform_locations.POINT_LIGHTS) {\n            for (let i = 0; i < num_lights; i += 1) {\n              const light = lights.point[i];\n              if (!light) break;\n\n              gl.uniform3fv(material.uniform_locations.POINT_LIGHTS[i].location, light.location);\n              gl.uniform3fv(material.uniform_locations.POINT_LIGHTS[i].color, light.color);\n              gl.uniform1f(material.uniform_locations.POINT_LIGHTS[i].intensity, light.intensity);\n            }\n          }\n\n          gl.uniform3fv(material.uniform_locations.CAMERA_WORLD_POSITION, camera.world_position);\n          gl.uniformMatrix4fv(material.uniform_locations.VIEW, false, camera.view);\n          gl.uniformMatrix4fv(material.uniform_locations.PROJECTION, false, camera.projection);\n        }\n\n        // set mesh-specific built-in uniforms\n        gl.uniformMatrix4fv(material.uniform_locations.MODEL, false, model);\n        gl.uniformMatrix4fv(material.uniform_locations.MODEL_INVERSE_TRANSPOSE, false, model_inverse_transpose);\n\n        // set material-specific built-in uniforms\n        material.apply_uniforms(gl);\n\n        // set attributes\n        geometry.set_attributes(gl);\n\n        // draw\n        if (geometry.index) {\n          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, geometry.buffers.__index);\n          gl.drawElements(gl[geometry.primitive], geometry.index.length, gl.UNSIGNED_INT, 0);\n        } else {\n          const primitiveType = gl[geometry.primitive];\n          gl.drawArrays(primitiveType, 0, geometry.count);\n        }\n      }\n\n      function render_layer(layer) {\n        if (layer.needs_sort) {\n          layer.child_layers.sort((a, b) => a.index - b.index);\n          layer.needs_sort = false;\n        }\n\n        gl.depthMask(true);\n        gl.clearDepth(1.0);\n        gl.clear(gl.DEPTH_BUFFER_BIT);\n\n        for (let i = 0; i < layer.meshes.length; i += 1) {\n          render_mesh(layer.meshes[i]);\n        }\n\n        // TODO sort transparent meshes, furthest to closest\n        gl.depthMask(false);\n\n        if (camera_position_changed_since_last_render || layer.needs_transparency_sort) {\n          sort_transparent_meshes(layer.transparent_meshes);\n          layer.needs_transparency_sort = false;\n        }\n\n        for (let i = 0; i < layer.transparent_meshes.length; i += 1) {\n          render_mesh(layer.transparent_meshes[i]);\n        }\n\n        for (let i = 0; i < layer.child_layers.length; i += 1) {\n          render_layer(layer.child_layers[i]);\n        }\n      }\n\n      render_layer(root_layer);\n      camera_position_changed_since_last_render = false;\n    };\n\n    // for some wacky reason, Adblock Plus seems to prevent the\n    // initial dimensions from being correctly reported\n    const timeout = setTimeout(() => {\n      $width = canvas.clientWidth;\n      $height = canvas.clientHeight;\n    });\n\n    tick().then(() => draw(true));\n\n    return () => {\n      gl.getExtension('WEBGL_lose_context').loseContext();\n      clearTimeout(timeout);\n    };\n  });\n\n  const sort_transparent_meshes = meshes => {\n    if (meshes.length < 2) return;\n\n    const lookup = new Map();\n    const out = new Float32Array(16);\n\n    meshes.forEach(mesh => {\n      const z = mat4.multiply(out, camera.view, mesh.model)[14];\n      lookup.set(mesh, z);\n    });\n\n    meshes.sort((a, b) => lookup.get(a) - lookup.get(b));\n  };\n\n  let dimensions_need_update = true;\n\n  const update_dimensions = () => {\n    dimensions_need_update = true;\n    invalidate();\n  };\n\n  $: ($width, $height, update_dimensions());\n  $: (background, backgroundOpacity, fog, scene.invalidate());\n  $: if ($visible && pending) scene.invalidate();\n</script>\n\n<style>\n  .container, canvas {\n    position: relative;\n    width: 100%;\n    height: 100%;\n    display: block;\n    overflow: hidden;\n  }\n</style>\n\n<div class=\"container\" bind:clientWidth={$width} bind:clientHeight={$height}>\n  <canvas bind:this={canvas}></canvas>\n\n  {#if gl}\n    <slot width={$width} height={$height}></slot>\n  {/if}\n</div>\n","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {ReadonlyVec4} result the receiving vector\r\n * @param {ReadonlyVec4} U the first vector\r\n * @param {ReadonlyVec4} V the second vector\r\n * @param {ReadonlyVec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyVec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Gets the angular distance between two unit quaternions\r\n *\r\n * @param  {ReadonlyQuat} a     Origin unit quaternion\r\n * @param  {ReadonlyQuat} b     Destination unit quaternion\r\n * @return {Number}     Angle, in radians, between the two quaternions\r\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Calculate the exponential of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\r\n * Calculate the natural logarithm of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\r\n * Calculate the scalar power of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @param {Number} b amount to scale the quaternion by\r\n * @returns {quat} out\r\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random unit quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyMat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {ReadonlyQuat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {ReadonlyQuat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat} a The first quaternion.\r\n * @param {ReadonlyQuat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat} a The first vector.\r\n * @param {ReadonlyQuat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {ReadonlyVec3} a the initial vector\r\n * @param {ReadonlyVec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {ReadonlyQuat} c the third operand\r\n * @param {ReadonlyQuat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\r\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\r\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {ReadonlyMat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to translate\r\n * @param {ReadonlyVec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Calculates a 3x3 matrix from the given quaternion\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {ReadonlyMat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","<script>\n  import { writable } from 'svelte/store';\n  import { get_scene, get_parent, set_parent } from '../internal/index.mjs';\n  import * as mat4 from 'gl-matrix/mat4';\n  import * as quat from 'gl-matrix/quat';\n\n  export let location = [0, 0, 0];\n  export let lookAt = undefined;\n  export let up = [0, 1, 0];\n  export let rotation = [0, 0, 0]; // TODO make it possible to set a quaternion as a prop?\n  export let scale = 1;\n\n  const scene = get_scene();\n  const parent = get_parent();\n\n  const { ctm: parent_ctm } = parent;\n  const ctm = writable(null);\n\n  let matrix = mat4.create();\n  let quaternion = quat.create();\n  const world_position = new Float32Array(matrix.buffer, 12 * 4, 3);\n\n  $: scale_array = typeof scale === 'number' ? [scale, scale, scale] : scale;\n\n  $: target = lookAt ? scene.get_target(lookAt) : writable(null);\n\n  $: if ($target) {\n    mat4.translate(matrix, $parent_ctm, location);\n    mat4.targetTo(matrix, world_position, $target, up);\n    mat4.scale(matrix, matrix, scale_array);\n\n    $ctm = matrix;\n  } else {\n    quaternion = quat.fromEuler(quaternion || quat.create(), ...rotation);\n    matrix = mat4.fromRotationTranslationScale(matrix, quaternion, location, scale_array);\n    $ctm = mat4.multiply($ctm || mat4.create(), $parent_ctm, matrix);\n  }\n\n  // $: quaternion = quat.fromEuler(quaternion || quat.create(), ...rotation);\n  // $: matrix = mat4.fromRotationTranslationScale(matrix || mat4.create(), quaternion, location, scale_array);\n  // $: $ctm = mat4.multiply($ctm || mat4.create(), $parent_ctm, matrix);\n  $: ($ctm, scene.invalidate());\n\n  set_parent({ ctm });\n</script>\n\n<slot></slot>\n","const caches = new Map();\n\nconst setters = {\n  [5126]:  (gl, loc, data) => gl.uniform1f(loc, data),\n  [35664]: (gl, loc, data) => gl.uniform2fv(loc, data),\n  [35665]: (gl, loc, data) => gl.uniform3fv(loc, data),\n  [35666]: (gl, loc, data) => gl.uniform4fv(loc, data),\n\n  [35674]: (gl, loc, data) => gl.uniformMatrix2fv(loc, false, data),\n  [35675]: (gl, loc, data) => gl.uniformMatrix3fv(loc, false, data),\n  [35676]: (gl, loc, data) => gl.uniformMatrix4fv(loc, false, data),\n\n  [35678]: (gl, loc, data) => {\n    gl.activeTexture(gl[`TEXTURE${data.index}`]);\n    gl.bindTexture(gl.TEXTURE_2D, data.texture);\n    gl.uniform1i(loc, data.index);\n  }\n};\n\nexport function compile(gl, vert, frag) {\n  if (!caches.has(gl)) caches.set(gl, new Map());\n  const cache = caches.get(gl);\n\n  const hash = vert + frag;\n  if (!cache.has(hash)) {\n    const program = create_program(gl, vert, frag);\n    const uniforms = get_uniforms(gl, program);\n    const attributes = get_attributes(gl, program);\n\n    cache.set(hash, { program, uniforms, attributes });\n  }\n\n  return cache.get(hash);\n}\n\nexport function remove_program(info) {\n  const cache = caches.get(info.gl);\n\n  if (--info.users === 0) {\n    info.gl.deleteProgram(info.program);\n    cache.delete(info.hash);\n  }\n}\n\nfunction pad(num, len = 4) {\n  num = String(num);\n  while (num.length < len) num = ` ${num}`;\n  return num;\n}\n\nfunction repeat(str, i) {\n  let result = '';\n  while (i--) result += str;\n  return result;\n}\n\nfunction create_shader(gl, type, source, label) {\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    return shader;\n  }\n\n  const log = gl.getShaderInfoLog(shader);\n  const match = /ERROR: (\\d+):(\\d+): (.+)/.exec(log);\n\n  if (match) {\n    const c = +match[1];\n    const l = +match[2] - 1;\n\n    console.log('%c' + match[3], 'font-weight: bold; color: red');\n\n    const lines = source.split('\\n');\n    for (let i = 0; i < lines.length; i += 1) {\n      if (Math.abs(l - i) > 5) continue;\n\n      const line = lines[i].replace(/^\\t+/gm, tabs => repeat(' ', tabs.length * 4));\n      const indent = /^\\s+/.exec(line);\n\n      const str = `${pad(i)}: ${line}`;\n\n      if (i === l) {\n        console.log('%c' + str, 'font-weight: bold; color: red');\n        console.log('%c' + (indent && indent[0] || '') + repeat(' ', c + 6) + '^', 'color: red');\n      } else {\n        console.log(str);\n      }\n    }\n\n    throw new Error(`Failed to compile ${label} shader`);\n  }\n\n  throw new Error(`Failed to compile ${label} shader:\\n${log}`);\n}\n\nfunction create_program(gl, vert, frag) {\n  const program = gl.createProgram();\n\n  gl.attachShader(program, create_shader(gl, gl.VERTEX_SHADER, vert, 'vertex'));\n  gl.attachShader(program, create_shader(gl, gl.FRAGMENT_SHADER, frag, 'fragment'));\n  gl.linkProgram(program);\n\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (!success) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error(`Failed to compile program:\\n${gl.getProgramInfoLog(program)}`);\n  }\n\n  return program;\n}\n\nfunction get_uniforms(gl, program) {\n  const uniforms = [];\n\n  const n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n  for (let i = 0; i < n; i += 1) {\n    let { size, type, name } = gl.getActiveUniform(program, i);\n    const loc = gl.getUniformLocation(program, name);\n    const setter = setters[type];\n\n    if (!setter) {\n      throw new Error(`not implemented ${type} (${name})`);\n    }\n\n    uniforms.push({ size, type, name, setter, loc });\n  }\n\n  return uniforms;\n}\n\nfunction get_attributes(gl, program) {\n  const attributes = [];\n\n  const n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n  for (let i = 0; i < n; i += 1) {\n    let { size, type, name } = gl.getActiveAttrib(program, i);\n    name = name.replace('[0]', '');\n    const loc = gl.getAttribLocation(program, name);\n\n    attributes.push({ size, type, name, loc });\n  }\n\n  return attributes;\n}\n","import vert_builtin from './shaders/builtin/vert.glsl';\nimport frag_builtin from './shaders/builtin/frag.glsl';\nimport { compile } from './program.mjs';\nimport { process_color } from '../../internal/utils.mjs';\n\nfunction deep_set(obj, path, value) {\n  const parts = path.replace(/\\]$/, '').split(/\\[|\\]\\.|\\./);\n\n  while (parts.length > 1) {\n    const part = parts.shift();\n    const next = parts[0];\n\n    if (!obj[part]) obj[part] = /^\\d+$/.test(next) ? [] : {};\n    obj = obj[part];\n  }\n\n  obj[parts[0]] = value;\n}\n\nexport default class Material {\n  constructor(scene, vert, frag, defines) {\n    this.scene = scene;\n\n    const gl = scene.gl;\n    this.gl = gl;\n\n    const { program, uniforms, attributes } = compile(\n      gl,\n      scene.defines + defines + '\\n\\n' + vert_builtin + '\\n\\n' + vert,\n      scene.defines + defines + '\\n\\n' + frag_builtin + '\\n\\n' + frag\n    );\n\n    this.program = program;\n    this.uniforms = uniforms;\n    this.attributes = attributes;\n\n    this.uniform_locations = {};\n    this.uniforms.forEach(uniform => {\n      deep_set(this.uniform_locations, uniform.name, gl.getUniformLocation(this.program, uniform.name));\n    });\n\n    this.attribute_locations = {};\n    this.attributes.forEach(attribute => {\n      this.attribute_locations[attribute.name] = gl.getAttribLocation(this.program, attribute.name);\n    });\n\n    this.raw_values = {};\n    this.values = {};\n  }\n\n  set_uniforms(raw_values) {\n    let texture_index = 0;\n\n    this.uniforms.forEach(({ name, type, loc, setter, processor }) => {\n      if (name in raw_values) {\n        let data = raw_values[name];\n\n        if (data === this.raw_values[name]) return;\n\n        if (type === 35678) {\n          // texture\n          this.values[name] = {\n            texture: data.instantiate(this.scene)._,\n            index: texture_index++\n          };\n\n          return;\n        }\n\n        if (typeof data === 'number' && type !== 5126) {\n          // data provided was a number like 0x123456,\n          // but it needs to be an array. for now,\n          // assume it's a color, i.e. vec3\n          data = process_color(data);\n        }\n\n        this.values[name] = data;\n      }\n    });\n\n    this.raw_values = raw_values;\n  }\n\n  apply_uniforms(gl, builtins) {\n    // TODO if this is the only program, maybe\n    // we don't need to re-run this each time\n    this.uniforms.forEach(uniform => {\n      if (uniform.name in this.values) {\n        uniform.setter(gl, uniform.loc, this.values[uniform.name]);\n      }\n    });\n  }\n\n  destroy() {\n    // TODO\n  }\n}\n","<script>\n  import { onDestroy, beforeUpdate } from 'svelte';\n  import { writable } from 'svelte/store';\n  import { get_scene, get_layer, get_parent } from '../../internal/index.mjs';\n  import { process_color } from '../../internal/utils.mjs';\n  import Material from './Material.mjs';\n  import vert_default from './shaders/default/vert.glsl';\n  import frag_default from './shaders/default/frag.glsl';\n  import * as mat4 from 'gl-matrix/mat4';\n  import * as quat from 'gl-matrix/quat';\n\n  export let location = [0, 0, 0];\n  export let rotation = [0, 0, 0]; // TODO make it possible to set a quaternion as a prop?\n  export let scale = 1;\n\n  export let geometry;\n\n  export let vert = vert_default;\n  export let frag = frag_default;\n  export let uniforms = {};\n  export let depthTest = undefined;\n  export let doubleSided = undefined;\n  export let transparent = false;\n\n  const scene = get_scene();\n  const layer = get_layer();\n  const { ctm } = get_parent();\n\n  const out = mat4.create();\n  const out2 = mat4.create();\n\n  $: scale_array = typeof scale === 'number' ? [scale, scale, scale] : scale;\n  $: quaternion = quat.fromEuler(quaternion || quat.create(), ...rotation);\n  $: matrix = mat4.fromRotationTranslationScale(matrix || mat4.create(), quaternion, location, scale_array);\n  $: model = mat4.multiply(model || mat4.create(), $ctm, matrix);\n\n  $: defines = Object.keys(uniforms)\n    .filter(k => uniforms[k] != null)\n    .map(k => `#define has_${k} true\\n`)\n    .join('');\n  $: material_instance = new Material(scene, vert, frag, defines);\n  $: material_instance.set_uniforms(uniforms);\n  $: geometry_instance = geometry.instantiate(scene, material_instance.program);\n\n  const mesh = {};\n  $: mesh.model = model;\n  $: mesh.model_inverse_transpose = (mat4.invert(out2, model), mat4.transpose(out2, out2));\n  $: mesh.material = material_instance;\n  $: mesh.geometry = geometry_instance;\n  $: mesh.depthTest = depthTest;\n  $: mesh.doubleSided = doubleSided;\n  $: mesh.transparent = transparent;\n\n  let existing = true; // track if we've previously added this mesh\n  const add_mesh = () => {\n    layer.add_mesh(mesh, existing);\n    existing = false;\n  };\n\n  $: (transparent, add_mesh());\n  $: (model, transparent && (layer.needs_transparency_sort = true));\n  $: (geometry_instance, model, uniforms, scene.invalidate());\n\n  onDestroy(() => {\n    if (mesh.material) mesh.material.destroy();\n  });\n</script>\n","<script>\n  import { writable } from 'svelte/store';\n  import { get_scene, get_parent } from '../internal/index.mjs';\n  import * as mat4 from 'gl-matrix/mat4';\n\n  export let id;\n  export let location = [0, 0, 0];\n\n  const { get_target } = get_scene();\n  const { ctm } = get_parent();\n\n  let model = mat4.create();\n  const world_position = new Float32Array(model.buffer, 12 * 4, 3);\n\n  // break `location` out into its components, so that we can\n  // skip downstream computations. TODO would be nice if there\n  // was a neater way to achieve this\n  $: x = location[0];\n  $: y = location[1];\n  $: z = location[2];\n\n  const loc = new Float32Array(3);\n  $: loc[0] = x, loc[1] = y, loc[2] = z;\n\n  $: model = mat4.translate(model, $ctm, loc);\n  $: (model, get_target(id).set(world_position));\n</script>\n","<script>\n  import { get_scene } from '../../internal/index.mjs';\n  import { process_color } from '../../internal/utils.mjs';\n\n  export let color = [1, 1, 1];\n  export let intensity = 0.2;\n\n  const scene = get_scene();\n\n  const light = {};\n  $: light.color = process_color(color);\n  $: light.intensity = intensity;\n\n  scene.add_ambient_light(light);\n\n  $: (light, scene.invalidate());\n</script>\n","<script>\n  import { get_scene, get_parent } from '../../internal/index.mjs';\n  import { process_color } from '../../internal/utils.mjs';\n  import * as mat4 from 'gl-matrix/mat4';\n  import * as vec3 from 'gl-matrix/vec3';\n\n  export let direction = new Float32Array([-1, -1, -1]);\n  export let color = new Float32Array([1, 1, 1]);\n  export let intensity = 1;\n\n  const scene = get_scene();\n  const { ctm } = get_parent();\n\n  $: multiplied = vec3.transformMat4(multiplied || vec3.create(), direction, $ctm);\n\n  const light = {};\n  $: light.direction = vec3.normalize(light.direction || vec3.create(), multiplied);\n  $: light.color = process_color(color);\n  $: light.intensity = intensity;\n\n  scene.add_directional_light(light);\n\n  $: (light, scene.invalidate());\n</script>\n","<script>\n  import { get_scene, get_parent } from '../../internal/index.mjs';\n  import { process_color } from '../../internal/utils.mjs';\n  import * as mat4 from 'gl-matrix/mat4';\n  import * as vec3 from 'gl-matrix/vec3';\n\n  export let location = new Float32Array([-1, -1, -1]);\n  export let color = new Float32Array([1, 1, 1]);\n  export let intensity = 1;\n\n  const scene = get_scene();\n  const { ctm } = get_parent();\n\n  let light = { // TODO change to a const once bug is fixed\n    location: vec3.create(),\n    color: null,\n    intensity: null\n  };\n\n  $: light.location = vec3.transformMat4(light.location, location, $ctm);\n  $: light.color = process_color(color);\n  $: light.intensity = intensity;\n\n  scene.add_point_light(light);\n\n  $: (light, scene.invalidate());\n</script>\n","var default_sort = function (item, needle) { return item - needle; };\nfunction binarySearch(array, search, fn) {\n    if (fn === void 0) { fn = default_sort; }\n    var low = 0;\n    var high = array.length - 1;\n    var sort = fn.length === 1\n        ? function (item, needle) { return fn(item) - search; }\n        : fn;\n    while (low <= high) {\n        var i = (high + low) >> 1;\n        var d = sort(array[i], search);\n        if (d < 0) {\n            low = i + 1;\n        }\n        else if (d > 0) {\n            high = i - 1;\n        }\n        else {\n            return i;\n        }\n    }\n    return -low - 1;\n}\n\nfunction pickRandom(array) {\n    var i = ~~(Math.random() * array.length);\n    return array[i];\n}\n\n// http://bost.ocks.org/mike/shuffle/\nfunction shuffle(array) {\n    var m = array.length;\n    // While there remain elements to shuffle…\n    while (m > 0) {\n        // Pick a remaining element…\n        var i = Math.floor(Math.random() * m--);\n        // And swap it with the current element.\n        var t = array[m];\n        array[m] = array[i];\n        array[i] = t;\n    }\n    return array;\n}\n\nfunction queue(max) {\n    if (max === void 0) { max = 4; }\n    var items = []; // TODO\n    var pending = 0;\n    var closed = false;\n    var fulfil_closed;\n    function dequeue() {\n        if (pending === 0 && items.length === 0) {\n            if (fulfil_closed)\n                fulfil_closed();\n        }\n        if (pending >= max)\n            return;\n        if (items.length === 0)\n            return;\n        pending += 1;\n        var _a = items.shift(), fn = _a.fn, fulfil = _a.fulfil, reject = _a.reject;\n        var promise = fn();\n        try {\n            promise.then(fulfil, reject).then(function () {\n                pending -= 1;\n                dequeue();\n            });\n        }\n        catch (err) {\n            reject(err);\n            pending -= 1;\n            dequeue();\n        }\n        dequeue();\n    }\n    return {\n        add: function (fn) {\n            if (closed) {\n                throw new Error(\"Cannot add to a closed queue\");\n            }\n            return new Promise(function (fulfil, reject) {\n                items.push({ fn: fn, fulfil: fulfil, reject: reject });\n                dequeue();\n            });\n        },\n        close: function () {\n            closed = true;\n            return new Promise(function (fulfil, reject) {\n                if (pending === 0) {\n                    fulfil();\n                }\n                else {\n                    fulfil_closed = fulfil;\n                }\n            });\n        }\n    };\n}\n\nfunction createSprite(width, height, fn) {\n    var canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    var ctx = canvas.getContext('2d');\n    fn(ctx, canvas);\n    return canvas;\n}\n\nfunction clamp(num, min, max) {\n    return num < min ? min : num > max ? max : num;\n}\n\nfunction random(a, b) {\n    if (b === undefined)\n        return Math.random() * a;\n    return a + Math.random() * (b - a);\n}\n\nfunction linear(domain, range) {\n    var d0 = domain[0];\n    var r0 = range[0];\n    var m = (range[1] - r0) / (domain[1] - d0);\n    return Object.assign(function (num) {\n        return r0 + (num - d0) * m;\n    }, {\n        inverse: function () { return linear(range, domain); }\n    });\n}\n\n// https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\nfunction commas(num) {\n    var parts = String(num).split('.');\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n    return parts.join('.');\n}\n\n// array\n\nexport { binarySearch, pickRandom, shuffle, queue, createSprite, clamp, random, linear as linearScale, commas };\n","export function debounce(fn) {\n  let scheduled = false;\n  let event;\n\n  function release() {\n    fn(event);\n    scheduled = false;\n  }\n\n  return function(e) {\n    if (!scheduled) {\n      requestAnimationFrame(release);\n      scheduled = true;\n    }\n\n    event = e;\n  };\n}\n","<script>\n  import * as yootils from 'yootils';\n  import { debounce } from './debounce.js';\n  import { onDestroy } from 'svelte';\n  import { get_scene } from '../internal/index.mjs';\n  import { normalize } from '../internal/utils.mjs';\n\n  // TODO check we're not inside a group?\n  const scene = get_scene();\n\n  export let location = new Float32Array([1, 3, 5]);\n  export let target = new Float32Array([0, 1, 0]);\n  // export let up = new Float32Array([0, 1, 0]);\n\n  export let minDistance = 0;\n  export let maxDistance = Infinity;\n\n  // How far you can orbit vertically, upper and lower limits.\n  // Range is 0 to Math.PI radians.\n  export let minPolarAngle = 0; // radians\n  export let maxPolarAngle = Math.PI; // radians\n\n  // How far you can orbit horizontally, upper and lower limits.\n  // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n  // export let minAzimuthAngle = - Infinity; // radians\n  // export let maxAzimuthAngle = Infinity; // radians\n\n  // Enable damping (inertia). falsy == no damping\n  // export let damping = false;\n\n  const EPSILON = 0.000001;\n\n  function rotate(x, y) {\n    // TODO handle the up vector. for now, just assume [0,1,0]\n    const vx = location[0] - target[0];\n    const vy = location[1] - target[1];\n    const vz = location[2] - target[2];\n\n    const radius = Math.sqrt(vx * vx + vy * vy + vz * vz);\n\n    let theta = Math.atan2(vx, vz);\n    theta -= x;\n\n    let phi = Math.acos(yootils.clamp(vy / radius, -1, 1));\n    phi = yootils.clamp(phi - y, EPSILON, Math.PI - EPSILON);\n    phi = yootils.clamp(phi, minPolarAngle, maxPolarAngle);\n\n    const sin_phi_radius = Math.sin(phi) * radius;\n\n    const nx = sin_phi_radius * Math.sin(theta);\n    const ny = Math.cos(phi) * radius;\n    const nz = sin_phi_radius * Math.cos(theta);\n\n    location[0] = target[0] + nx;\n    location[1] = target[1] + ny;\n    location[2] = target[2] + nz;\n  }\n\n  function pan(dx, dy) {\n    // TODO handle the up vector. for now, just assume [0,1,0]\n    const vx = location[0] - target[0];\n    const vy = location[1] - target[1];\n    const vz = location[2] - target[2];\n\n    // delta y = along xz\n    {\n      const direction = normalize([vx, vz]);\n      const x = -direction[0] * dy;\n      const z = -direction[1] * dy;\n\n      location[0] += x;\n      location[2] += z;\n\n      target[0] += x;\n      target[2] += z;\n    }\n\n    // delta x = tangent to xz\n    {\n      const tangent = normalize([-vz, vx]);\n      const x = tangent[0] * dx;\n      const z = tangent[1] * dx;\n\n      location[0] += x;\n      location[2] += z;\n\n      target[0] += x\n      target[2] += z;\n    }\n  }\n\n  function zoom(amount) {\n    let vx = location[0] - target[0];\n    let vy = location[1] - target[1];\n    let vz = location[2] - target[2];\n\n    const mag = Math.sqrt(vx * vx + vy * vy + vz * vz);\n\n    amount = yootils.clamp(\n      amount,\n      (mag / maxDistance),\n      minDistance ? (mag / minDistance) : Infinity\n    );\n\n    vx /= amount;\n    vy /= amount;\n    vz /= amount;\n\n    location[0] = target[0] + vx;\n    location[1] = target[1] + vy;\n    location[2] = target[2] + vz;\n  }\n\n  function handle_mousedown(event) {\n    let last_x = event.clientX;\n    let last_y = event.clientY;\n\n    const handle_mousemove = debounce(event => {\n      const x = event.clientX;\n      const y = event.clientY;\n\n      const dx = x - last_x;\n      const dy = y - last_y;\n\n      if (event.shiftKey || event.which === 2) {\n        pan(dx * 0.01, dy * 0.01);\n      } else {\n        rotate(dx * 0.005, dy * 0.005);\n      }\n\n      last_x = x;\n      last_y = y;\n    });\n\n    function handle_mouseup(event) {\n      window.removeEventListener('mousemove', handle_mousemove);\n      window.removeEventListener('mouseup', handle_mouseup);\n    }\n\n    window.addEventListener('mousemove', handle_mousemove);\n    window.addEventListener('mouseup', handle_mouseup);\n  }\n\n  const mousewheel_zoom = debounce(event => {\n    zoom(Math.pow(1.004, event.wheelDeltaY));\n  });\n\n  function handle_mousewheel(event) {\n    event.preventDefault();\n    mousewheel_zoom(event);\n  }\n\n  function start_rotate(event) {\n    event.preventDefault();\n\n    const touch = event.touches[0];\n    const finger = touch.identifier;\n\n    let last_x = touch.clientX;\n    let last_y = touch.clientY;\n\n    const handle_touchmove = debounce(event => {\n      if (event.touches.length > 1) return;\n\n      const touch = event.touches[0];\n      if (touch.identifier !== finger) return;\n\n      const dx = (touch.clientX - last_x);\n      const dy = (touch.clientY - last_y);\n\n      rotate(dx * 0.003, dy * 0.003);\n\n      last_x = touch.clientX;\n      last_y = touch.clientY;;\n    });\n\n    function handle_touchend(event) {\n      let i = event.changedTouches.length;\n\n      while (i--) {\n        const touch = event.changedTouches[i];\n        if (touch.identifier === finger) {\n          window.removeEventListener('touchmove', handle_touchmove);\n          window.removeEventListener('touchend', handle_touchend);\n\n          return;\n        }\n      }\n    }\n\n    window.addEventListener('touchmove', handle_touchmove);\n    window.addEventListener('touchend', handle_touchend);\n  }\n\n  function pythag(a, b) {\n    return Math.sqrt(a * a + b * b);\n  }\n\n  function start_pan_zoom(event) {\n    event.preventDefault();\n\n    const touch_a = event.touches[0];\n    const touch_b = event.touches[1];\n\n    const finger_a = touch_a.identifier;\n    const finger_b = touch_b.identifier;\n\n    let last_cx = (touch_a.clientX + touch_b.clientX) / 2;\n    let last_cy = (touch_a.clientY + touch_b.clientY) / 2;\n    let last_d = pythag(touch_b.clientX - touch_a.clientX, touch_b.clientY - touch_a.clientY);\n\n    const handle_touchmove = debounce(event => {\n      if (event.touches.length !== 2) {\n        alert(`${event.touches.length} touches`);\n        return;\n      }\n\n      const touch_a = event.touches[0];\n      const touch_b = event.touches[1];\n\n      if (touch_a.identifier !== finger_a && touch_a.identifier !== finger_b) return;\n      if (touch_b.identifier !== finger_a && touch_b.identifier !== finger_b) return;\n\n      const cx = (touch_a.clientX + touch_b.clientX) / 2;\n      const cy = (touch_a.clientY + touch_b.clientY) / 2;\n      const d = pythag(touch_b.clientX - touch_a.clientX, touch_b.clientY - touch_a.clientY);\n\n      const dx = cx - last_cx;\n      const dy = cy - last_cy;\n\n      pan(dx * 0.01, dy * 0.01);\n      zoom(d / last_d);\n\n      last_cx = cx;\n      last_cy = cy;\n      last_d = d;\n    });\n\n    function handle_touchend(event) {\n      let i = event.changedTouches.length;\n\n      while (i--) {\n        const touch = event.changedTouches[i];\n        if (touch.identifier === finger_a || touch.identifier === finger_b) {\n          window.removeEventListener('touchmove', handle_touchmove);\n          window.removeEventListener('touchend', handle_touchend);\n\n          return;\n        }\n      }\n    }\n\n    window.addEventListener('touchmove', handle_touchmove);\n    window.addEventListener('touchend', handle_touchend);\n  }\n\n  function handle_touchstart(event) {\n    if (event.touches.length === 1) {\n      start_rotate(event);\n    }\n\n    if (event.touches.length === 2) {\n      start_pan_zoom(event);\n    }\n  }\n\n  scene.canvas.addEventListener('mousedown', handle_mousedown);\n  scene.canvas.addEventListener('mousewheel', handle_mousewheel);\n  scene.canvas.addEventListener('touchstart', handle_touchstart);\n\n  onDestroy(() => {\n    scene.canvas.removeEventListener('mousedown', handle_mousedown);\n    scene.canvas.removeEventListener('mousewheel', handle_mousewheel);\n    scene.canvas.removeEventListener('touchstart', handle_touchstart);\n  });\n</script>\n\n<slot {location} {target}></slot>\n","<script>\n  import { writable } from 'svelte/store';\n  import { get_scene, get_parent } from '../../internal/index.mjs';\n  import * as mat4 from 'gl-matrix/mat4';\n\n  export let location = [0, 0, 0];\n  export let lookAt = null;\n  export let up = [0, 1, 0];\n  export let fov = 60;\n  export let near = 1;\n  export let far = 20000;\n\n  const { add_camera, update_camera, width, height, get_target } = get_scene();\n  const { ctm } = get_parent();\n\n  const matrix = mat4.create();\n  const world_position = new Float32Array(matrix.buffer, 12 * 4, 3);\n\n  // should be a const, pending https://github.com/sveltejs/svelte/issues/2728\n  let camera = {\n    matrix,\n    world_position,\n    view: mat4.create(),\n    projection: mat4.create()\n  };\n\n  let target = writable(null);\n\n  $: if (typeof lookAt === 'string') {\n    target = get_target(lookAt);\n  } else {\n    target.set(lookAt);\n  }\n\n  $: camera.matrix = (\n    mat4.translate(camera.matrix, $ctm, location),\n    $target && mat4.targetTo(camera.matrix, world_position, $target, up),\n    camera.matrix\n  );\n\n  $: camera.view = mat4.invert(camera.view, camera.matrix);\n\n  $: camera.projection = mat4.perspective(\n    camera.projection,\n    fov / 180 * Math.PI,\n    $width / $height,\n    near,\n    far\n  );\n\n  $: update_camera(camera);\n\n  add_camera(camera);\n</script>\n","class GeometryInstance {\n  constructor(scene, program, attributes, index, primitive, count) {\n    this.scene = scene;\n    const gl = scene.gl;\n\n    this.attributes = attributes;\n    this.index = index;\n    this.primitive = primitive;\n    this.count = count;\n\n    this.locations = {};\n    this.buffers = {};\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n\n      this.locations[key] = gl.getAttribLocation(program, key);\n\n      const buffer = gl.createBuffer();\n      this.buffers[key] = buffer;\n\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferData(gl.ARRAY_BUFFER, attribute.data, attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW);\n    }\n\n    if (index) {\n      const buffer = gl.createBuffer();\n      this.buffers.__index = buffer;\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\n      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, index, gl.STATIC_DRAW);\n    }\n  }\n\n  set_attributes(gl) {\n    for (const key in this.attributes) {\n      const attribute = this.attributes[key];\n\n      const loc = this.locations[key];\n      if (loc < 0) continue; // attribute is unused by current program\n\n      const {\n        size = 3,\n        type = gl.FLOAT,\n        normalized = false,\n        stride = 0,\n        offset = 0\n      } = attribute;\n\n      // Bind the position buffer.\n      const buffer = this.buffers[key];\n\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n      // Turn on the attribute\n      gl.enableVertexAttribArray(loc);\n\n      gl.vertexAttribPointer(\n        loc,\n        size,\n        type,\n        normalized,\n        stride,\n        offset\n      );\n    }\n  }\n\n  update(k, data, count) {\n    const scene = this.scene;\n    const { gl } = scene;\n\n    const attribute = this.attributes[k];\n    const buffer = this.buffers[k];\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, attribute.data = data, attribute.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW);\n\n    this.count = count;\n\n    if (count === Infinity) {\n      throw new Error(`GL.Geometry must be instantiated with one or more { data, size } attributes`);\n    }\n\n    scene.invalidate();\n  }\n}\n\nexport default class Geometry {\n  constructor(attributes = {}, opts = {}) {\n    this.attributes = attributes;\n\n    const { index, primitive = 'TRIANGLES' } = opts;\n    this.index = index;\n    this.primitive = primitive.toUpperCase();\n    this.count = get_count(attributes);\n\n    this.instances = new Map();\n  }\n\n  instantiate(scene, program) {\n    if (!this.instances.has(program)) {\n      this.instances.set(program, new GeometryInstance(\n        scene,\n        program,\n        this.attributes,\n        this.index,\n        this.primitive,\n        this.count\n      ));\n    }\n\n    return this.instances.get(program);\n  }\n\n  update(k, data) {\n    this.attributes[k].data = data;\n    this.count = get_count(this.attributes);\n\n    this.instances.forEach(instance => {\n      instance.update(k, data, this.count);\n    });\n  }\n}\n\nfunction get_count(attributes) {\n  let min = Infinity;\n\n  for (const k in attributes) {\n    const count = attributes[k].data.length / attributes[k].size;\n    if (count < min) min = count;\n  }\n\n  return min;\n}\n","import Geometry from './Geometry.mjs';\nimport { memoize } from '../internal/utils.mjs';\n\nexport default memoize(() => {\n  return new Geometry({\n    position: {\n      data: new Float32Array([\n         1,  1, 0,\n        -1,  1, 0,\n         1, -1, 0,\n        -1, -1, 0,\n      ]),\n      size: 3\n    },\n\n    normal: {\n      data: new Float32Array([\n        0, 0, 1,\n        0, 0, 1,\n        0, 0, 1,\n        0, 0, 1\n      ]),\n      size: 3\n    },\n\n    uv: {\n      data: new Float32Array([\n        1, 0,\n        0, 0,\n        1, 1,\n        0, 1\n      ]),\n      size: 2\n    }\n  }, {\n    index: new Uint32Array([\n      0, 1, 2,\n      3, 2, 1\n    ])\n  });\n});\n","import Geometry from './Geometry.mjs';\nimport { memoize, normalize } from '../internal/utils.mjs';\n\nconst p = 0.85065080835204;\nconst q = 0.5257311121191336;\n\nconst position = new Float32Array([\n  -q, +p,  0,\n  +q, +p,  0,\n  -q, -p,  0,\n  +q, -p,  0,\n   0, -q, +p,\n   0, +q, +p,\n   0, -q, -p,\n   0, +q, -p,\n  +p,  0, -q,\n  +p,  0, +q,\n  -p,  0, -q,\n  -p,  0, +q\n]);\n\nconst index = new Uint16Array([\n  0, 11, 5,\n  0, 5, 1,\n  0, 1, 7,\n  0, 7, 10,\n  0, 10, 11,\n  1, 5, 9,\n  5, 11, 4,\n  11, 10, 2,\n  10, 7, 6,\n  7, 1, 8,\n  3, 9, 4,\n  3, 4, 2,\n  3, 2, 6,\n  3, 6, 8,\n  3, 8, 9,\n  4, 9, 5,\n  2, 4, 11,\n  6, 2, 10,\n  8, 6, 7,\n  9, 8, 1\n]);\n\nconst smooth_geometry = [\n  new Geometry({\n    position: { data: position, size: 3 },\n    normal: { data: position, size: 3 }\n  }, { index })\n];\n\nfunction subdivide(geometry) {\n  const index = new Uint32Array(geometry.index.length * 4);\n\n  const old_position = geometry.attributes.position.data;\n  const new_positions = [];\n  const lookup = new Map();\n\n  function get_index(point) {\n    const hash = `${point[0].toPrecision(6)},${point[1].toPrecision(6)},${point[2].toPrecision(6)}`;\n\n    if (lookup.has(hash)) {\n      return lookup.get(hash);\n    }\n\n    const index = new_positions.length;\n    lookup.set(hash, index);\n    new_positions[index] = point;\n    return index;\n  }\n\n  function mid(a, b) {\n    return get_index([\n      (a[0] + b[0]) / 2,\n      (a[1] + b[1]) / 2,\n      (a[2] + b[2]) / 2\n    ]);\n  }\n\n  for (let i = 0; i < geometry.index.length; i += 3) {\n    const c0 = geometry.index[i + 0];\n    const c1 = geometry.index[i + 1];\n    const c2 = geometry.index[i + 2];\n\n    const v0 = [\n      old_position[c0 * 3 + 0],\n      old_position[c0 * 3 + 1],\n      old_position[c0 * 3 + 2]\n    ];\n\n    const v1 = [\n      old_position[c1 * 3 + 0],\n      old_position[c1 * 3 + 1],\n      old_position[c1 * 3 + 2]\n    ];\n\n    const v2 = [\n      old_position[c2 * 3 + 0],\n      old_position[c2 * 3 + 1],\n      old_position[c2 * 3 + 2]\n    ];\n\n    const a = mid(v0, v1);\n    const b = mid(v1, v2);\n    const c = mid(v2, v0);\n\n    // four new faces\n    const j = i * 4;\n\n    index[j + 0] = get_index(v0);\n    index[j + 1] = a;\n    index[j + 2] = c;\n\n    index[j + 3] = get_index(v1);\n    index[j + 4] = b;\n    index[j + 5] = a;\n\n    index[j + 6] = get_index(v2);\n    index[j + 7] = c;\n    index[j + 8] = b;\n\n    index[j + 9] = a\n    index[j + 10] = b;\n    index[j + 11] = c;\n  }\n\n  const position = new Float32Array(new_positions.length * 3);\n  for (let i = 0; i < new_positions.length; i += 1) {\n    const vector = normalize(new_positions[i]);\n\n    position[i * 3 + 0] = vector[0];\n    position[i * 3 + 1] = vector[1];\n    position[i * 3 + 2] = vector[2];\n  }\n\n  return new Geometry({\n    position: { data: position, size: 3 },\n    normal: { data: position, size: 3 }\n  }, { index })\n}\n\nfunction create_smooth_geometry(subdivisions = 0) {\n  if (!smooth_geometry[subdivisions]) {\n    const geometry = create_smooth_geometry(subdivisions - 1);\n    smooth_geometry[subdivisions] = subdivide(geometry);\n  }\n\n  return smooth_geometry[subdivisions];\n}\n\nfunction create_flat_geometry(subdivisions) {\n  throw new Error(`TODO implement flat sphere geometry`);\n}\n\nexport default memoize(({ subdivisions = 0, shading = 'smooth' } = {}) => {\n  return shading === 'smooth'\n    ? create_smooth_geometry(subdivisions)\n    : create_flat_geometry(subdivisions);\n});\n","import Geometry from './Geometry.mjs';\nimport { memoize } from '../internal/utils.mjs';\n\nconst PI = Math.PI;\nconst PI2 = PI * 2;\n\nfunction create_smooth_geometry(turns, bands) {\n  const num_vertices = (turns + 1) * (bands + 1);\n  const num_faces_per_turn = 2 * (bands - 1);\n  const num_faces = num_faces_per_turn * turns;\n\n  const position = new Float32Array(num_vertices * 3); // doubles as normal\n  const uv = new Float32Array(num_vertices * 2);\n  const index = new Uint32Array(num_faces * 3);\n\n  let position_index = 0;\n  let uv_index = 0;\n\n  for (let i = 0; i <= turns; i += 1) {\n    const u = i / turns;\n\n    for (let j = 0; j <= bands; j += 1) {\n      const v = j / bands;\n\n      const x = -Math.cos(u * PI2) * Math.sin(v * PI);\n      const y = Math.cos(v * PI);\n      const z = Math.sin(u * PI2) * Math.sin(v * PI);\n\n      position[position_index++] = x;\n      position[position_index++] = y;\n      position[position_index++] = z;\n\n      uv[uv_index++] = u;\n      uv[uv_index++] = v;\n    }\n  }\n\n  let face_index = 0;\n\n  for (let i = 0; i < turns; i += 1) {\n    const offset = i * (bands + 1);\n\n    // north pole face\n    index[face_index++] = offset + 0;\n    index[face_index++] = offset + 1;\n    index[face_index++] = offset + bands + 2;\n\n    for (let j = 1; j < bands - 1; j += 1) {\n      index[face_index++] = offset + j;\n      index[face_index++] = offset + j + 1;\n      index[face_index++] = offset + j + bands + 1;\n\n      index[face_index++] = offset + j + bands + 1;\n      index[face_index++] = offset + j + 1;\n      index[face_index++] = offset + j + bands + 2;\n    }\n\n    index[face_index++] = offset + bands - 1;\n    index[face_index++] = offset + bands;\n    index[face_index++] = offset + bands * 2;\n  }\n\n  return new Geometry({\n    position: {\n      data: position,\n      size: 3\n    },\n    normal: {\n      data: position,\n      size: 3\n    },\n    uv: {\n      data: uv,\n      size: 2\n    }\n  }, {\n    index\n  });\n}\n\nfunction create_flat_geometry(turns, bands) {\n  throw new Error('TODO implement flat geometry');\n}\n\nexport default memoize(({ turns = 8, bands = 6, shading = 'smooth' } = {}) => {\n  return shading === 'smooth'\n    ? create_smooth_geometry(turns, bands)\n    : create_flat_geometry(turns, bands);\n});\n","import { create_worker } from './utils.mjs';\n\nconst worker_url = (typeof Blob !== 'undefined' && URL.createObjectURL(new Blob(\n  [`self.onmessage = e => { self.onmessage = null; eval(e.data); };`],\n  { type: 'application/javascript' }\n))) || typeof window !== 'undefined' && window.SVELTE_GL_WORKER_URL;\n\nconst image_cache = new Map();\n\nexport function load_image(src) {\n  if (!worker_url) {\n    throw new Error(`Workers cannot be created from Blob URLs in this browser. Please set SVELTE_GL_WORKER_URL`);\n  }\n\n  if (!image_cache.has(src)) {\n    image_cache.set(src, new Promise((fulfil, reject) => {\n      if (typeof createImageBitmap !== 'undefined') {\n        // TODO pool workers?\n        const worker = create_worker(worker_url, () => {\n          self.onmessage = e => {\n            fetch(e.data, { mode: 'cors' })\n              .then(response => response.blob())\n              .then(blobData => createImageBitmap(blobData))\n              .then(bitmap => {\n                self.postMessage({ bitmap }, [bitmap]);\n              })\n              .catch(error => {\n                self.postMessage({\n                  error: {\n                    message: error.message,\n                    stack: error.stack\n                  }\n                });\n              });\n          };\n        });\n\n        worker.onmessage = e => {\n          if (e.data.error) {\n            image_cache.delete(src);\n            reject(e.data.error);\n          }\n\n          else fulfil(e.data.bitmap);\n        };\n\n        worker.postMessage(new URL(src, location.href).href);\n      } else {\n        const img = new Image();\n        img.crossOrigin = '';\n        img.onload = () => fulfil(img);\n        img.onerror = e => {\n          image_cache.delete(src);\n          reject(e);\n        };\n        img.src = src;\n      }\n    }));\n  }\n\n  return image_cache.get(src);\n}\n","<script>\n  import { onMount } from 'svelte';\n  import * as GL from '@sveltejs/gl';\n\n  let rand = (min, max) => {\n    return min + (max - min) * Math.random();\n  }\n  // these are mostly bad colors\n  let rand_color = () => {\n    return Math.floor(Math.random() * 0x1000000);\n  }\n\n  let light = {};\n  let balls = [];\n\n  for(let i=0; i<10; i++) {\n\n    balls.push({\n      x: rand(-4, 4),\n      y: rand(0.5, 2),\n      z: rand(-4, 4),\n      dx: rand(-1, 1),\n      dy: rand(-1, 1),\n      dz: rand(-1, 1),\n      color: rand_color(),\n      sz: rand(0.2, 0.5),\n    });\n  }\n  onMount(() => {\n    let frame;\n\n    let loop = () => {\n      frame = requestAnimationFrame(loop);\n\n      light.x = 3 * Math.sin(Date.now() * 0.001);\n      light.y = 2.5 + 2 * Math.sin(Date.now() * 0.0004);\n      light.z = 3 * Math.cos(Date.now() * 0.002);\n\n      let dt = 0.02;\n      let g = 0.01;\n      let max_x = 5;\n      let min_x = -5;\n      let max_z = 5;\n      let min_z = -5;\n\n      for (let ball of balls) {\n        // move\n        ball.x += dt * ball.dx;\n        ball.y += dt * ball.dy;\n        ball.z += dt * ball.dz;\n        // gravity\n        ball.dy -= g;\n        // bounce if hit a wall\n        if (ball.y - ball.sz <= ball.sz) {\n          ball.dy = Math.abs(ball.dy);\n        }\n        if (ball.x + ball.sz >= max_x) {\n          ball.dx = -Math.abs(ball.dx);\n        }\n        if (ball.x - ball.sz <= min_x) {\n          ball.dx = Math.abs(ball.dx);\n        }\n        if (ball.z + ball.sz >= max_z) {\n          ball.dz = -Math.abs(ball.dz);\n        }\n        if (ball.z - ball.sz <= min_z) {\n          ball.dz = Math.abs(ball.dz);\n        }\n      }\n      // tell svelte it updated\n      balls = balls;\n    };\n\n    loop();\n\n    return () => cancelAnimationFrame(frame);\n  });\n</script>\n\n<GL.Scene>\n  <GL.Target id=\"center\" location={[0, 0, 0]}/>\n\n  <GL.OrbitControls maxPolarAngle={Math.PI / 2} let:location>\n    <GL.PerspectiveCamera {location} lookAt=\"center\" near={0.01} far={1000}/>\n  </GL.OrbitControls>\n\n  <GL.AmbientLight intensity={0.3}/>\n  <GL.DirectionalLight direction={[-1,-1,-1]} intensity={0.5}/>\n\n  <!-- floor -->\n  <GL.Mesh\n    geometry={GL.plane()}\n    location={[0,-0.01,0]}\n    rotation={[-90,0,0]}\n    scale={10}\n    uniforms={{ color: 0xffffff }}\n  />\n\n  <!-- spheres -->\n  {#each balls as {x,y,z,color,sz}}\n    <GL.Mesh\n      geometry={GL.sphere({ turns: 36, bands: 36 })}\n      location={[x,y,z]}\n      scale={sz}\n      uniforms={{ color, alpha: 0.9 }}\n      transparent\n    />\n  {/each}\n\n  <!-- moving light -->\n  <GL.Group location={[light.x,light.y,light.z]}>\n    <GL.Mesh\n      geometry={GL.sphere({ turns: 36, bands: 36 })}\n      location={[0,0.2,0]}\n      scale={0.1}\n      uniforms={{ color: 0xffffff, emissive: 0xcccc99 }}\n    />\n\n    <GL.PointLight\n      location={[0,0,0]}\n      color={0xffffff}\n      intensity={0.6}\n    />\n  </GL.Group>\n</GL.Scene>\n\n<style>\n</style>\n","import App from './App.svelte';\n\nvar app = new App({\n  target: document.body\n});\n\nexport default app;\n"],"names":["noop","assign","tar","src","k","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","subscribe","store","callbacks","unsub","unsubscribe","component_subscribe","component","callback","$$","on_destroy","push","create_slot","definition","ctx","$$scope","slot_ctx","get_slot_context","slice","update_slot","slot","slot_definition","dirty","get_slot_changes_fn","get_slot_context_fn","slot_changes","lets","undefined","merged","len","Math","max","length","i","get_slot_changes","slot_context","p","exclude_internal_props","props","result","set_store_value","ret","value","set","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","space","data","createTextNode","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","crossorigin","current_component","is_crossorigin","window","parent","error","set_current_component","get_current_component","Error","onMount","on_mount","onDestroy","setContext","key","context","getContext","get","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","schedule_update","then","flush","add_render_callback","flushing","seen_callbacks","Set","update","pop","has","add","clear","fragment","before_update","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","d","create_component","mount_component","m","new_on_destroy","map","filter","destroy_component","detaching","init","instance","create_fragment","not_equal","parent_component","prop_values","bound","Map","skip_bound","ready","rest","fill","make_dirty","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","[object Object]","this","$destroy","type","index","indexOf","splice","$$props","obj","$$set","keys","subscriber_queue","writable","start","stop","subscribers","new_value","run_queue","s","invalidate","subscriber","RENDERER","LAYER","PARENT","get_scene","get_parent","remove_item","array","item","remove_index","process_color","color","Float32Array","normalize","out","vector","total","mag","sqrt","memoize","cache","args","hash","JSON","stringify","ARRAY_TYPE","glMatrix.ARRAY_TYPE","invert","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","multiply","b0","b1","b2","b3","translate","v","x","y","z","fromRotationTranslationScale","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","sx","sy","sz","targetTo","eye","up","eyex","eyey","eyez","upx","upy","upz","z0","z1","x0","x1","fromValues","cross","ax","ay","az","bx","by","bz","transformMat4","hypot","arguments","vec","computed_style","getComputedStyle","z_index","parseInt","zIndex","position","style","iframe","tabIndex","source","contentWindow","onload","get_visibility","IntersectionObserver","observer","entries","el","bcr","getBoundingClientRect","bottom","right","top","innerHeight","left","innerWidth","is_intersecting","observe","unobserve","background","backgroundOpacity","fog","pixelRatio","use_fog","canvas","visible","gl","pending","draw","camera_stores","camera_matrix","view","projection","requestAnimationFrame","width","height","root_layer","create_layer","child_index","meshes","transparent_meshes","child_layers","layer","needs_sort","needs_transparency_sort","add_mesh","mesh","existing","transparent","add_child","child_layer","default_camera","camera","lights","ambient","directional","point","add_to","targets","camera_position_changed_since_last_render","scene","defines","join","add_camera","_camera","matrix","update_camera","add_directional_light","add_point_light","add_ambient_light","get_target","id","origin","mat4.create","ctm","get_matrix_world","getExtension","force","dimensions_need_update","DPR","devicePixelRatio","$width","$height","viewport","$visible","clearColor","bg","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","enable","CULL_FACE","BLEND","ambient_light","reduce","intensity","min","previous_program","previous_state","DEPTH_TEST","enabled","disable","render_mesh","model","model_inverse_transpose","geometry","material","depthTest","doubleSided","blendFuncSeparate","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","ONE","program","useProgram","uniform3fv","uniform_locations","AMBIENT_LIGHT","FOG_COLOR","uniform1f","FOG_DENSITY","DIRECTIONAL_LIGHTS","light","direction","POINT_LIGHTS","location","CAMERA_WORLD_POSITION","world_position","uniformMatrix4fv","VIEW","PROJECTION","MODEL","MODEL_INVERSE_TRANSPOSE","apply_uniforms","set_attributes","bindBuffer","ELEMENT_ARRAY_BUFFER","buffers","__index","drawElements","primitive","UNSIGNED_INT","primitiveType","drawArrays","count","render_layer","sort","depthMask","clearDepth","sort_transparent_meshes","timeout","setTimeout","clientWidth","clientHeight","loseContext","clearTimeout","lookup","mat4.multiply","slerp","t","omega","cosom","sinom","scale0","scale1","aw","bw","acos","sin","fromEuler","halfToRad","PI","cx","cos","cy","cz","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","vec3.create","vec3.fromValues","lookAt","rotation","scale","parent_ctm","quaternion","quat.create","buffer","set_parent","scale_array","$target","mat4.translate","$parent_ctm","mat4.targetTo","mat4.scale","$ctm","quat.fromEuler","mat4.fromRotationTranslationScale","caches","setters","5126","loc","35664","uniform2fv","35665","35666","uniform4fv","35674","uniformMatrix2fv","35675","uniformMatrix3fv","35676","35678","activeTexture","bindTexture","TEXTURE_2D","texture","uniform1i","compile","vert","frag","createProgram","attachShader","create_shader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","getProgramParameter","LINK_STATUS","console","log","getProgramInfoLog","create_program","uniforms","n","ACTIVE_UNIFORMS","size","getActiveUniform","getUniformLocation","setter","get_uniforms","attributes","ACTIVE_ATTRIBUTES","getActiveAttrib","replace","getAttribLocation","get_attributes","pad","num","String","repeat","str","label","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","match","exec","lines","split","abs","line","tabs","indent","Material","uniform","path","parts","part","shift","next","test","deep_set","attribute_locations","raw_values","values","texture_index","processor","instantiate","_","builtins","vert_default","frag_default","out2","destroy","material_instance","set_uniforms","geometry_instance","mat4.invert","mat4.transpose","multiplied","vec3.transformMat4","vec3.normalize","clamp","debounce","scheduled","release","e","pythag","minDistance","maxDistance","Infinity","minPolarAngle","maxPolarAngle","rotate","vx","vy","vz","radius","theta","atan2","phi","yootils.clamp","sin_phi_radius","nx","ny","nz","pan","dx","dy","tangent","zoom","amount","handle_mousedown","last_x","clientX","last_y","clientY","handle_mousemove","shiftKey","which","handle_mouseup","mousewheel_zoom","pow","wheelDeltaY","handle_mousewheel","preventDefault","handle_touchstart","touches","touch","finger","identifier","handle_touchmove","handle_touchend","changedTouches","start_rotate","touch_a","touch_b","finger_a","finger_b","last_cx","last_cy","last_d","alert","start_pan_zoom","fov","near","far","fovy","aspect","nf","f","tan","mat4.perspective","GeometryInstance","locations","createBuffer","ARRAY_BUFFER","bufferData","dynamic","DYNAMIC_DRAW","STATIC_DRAW","FLOAT","normalized","stride","offset","enableVertexAttribArray","vertexAttribPointer","Geometry","opts","toUpperCase","get_count","instances","normal","uv","Uint32Array","Uint16Array","PI2","turns","bands","shading","num_vertices","num_faces","position_index","uv_index","u","j","face_index","create_smooth_geometry","create_flat_geometry","Blob","URL","createObjectURL","SVELTE_GL_WORKER_URL","GL.sphere","alpha","emissive","GL.plane","iterations","rand","random","balls","dz","floor","frame","loop","Date","now","ball","cancelAnimationFrame","body"],"mappings":"gCAAA,SAASA,KAET,SAASC,EAAOC,EAAKC,GAEjB,IAAK,MAAMC,KAAKD,EACZD,EAAIE,GAAKD,EAAIC,GACjB,OAAOF,EAUX,SAASG,EAAIC,GACT,OAAOA,IAEX,SAASC,IACL,OAAOC,OAAOC,OAAO,MAEzB,SAASC,EAAQC,GACbA,EAAIC,QAAQP,GAEhB,SAASQ,EAAYC,GACjB,MAAwB,mBAAVA,EAElB,SAASC,EAAeC,EAAGC,GACvB,OAAOD,GAAKA,EAAIC,GAAKA,EAAID,IAAMC,GAAOD,GAAkB,iBAANA,GAAgC,mBAANA,EAahF,SAASE,EAAUC,KAAUC,GACzB,GAAa,MAATD,EACA,OAAOnB,EAEX,MAAMqB,EAAQF,EAAMD,aAAaE,GACjC,OAAOC,EAAMC,YAAc,IAAMD,EAAMC,cAAgBD,EAO3D,SAASE,EAAoBC,EAAWL,EAAOM,GAC3CD,EAAUE,GAAGC,WAAWC,KAAKV,EAAUC,EAAOM,IAElD,SAASI,EAAYC,EAAYC,EAAKC,EAAS1B,GAC3C,GAAIwB,EAAY,CACZ,MAAMG,EAAWC,EAAiBJ,EAAYC,EAAKC,EAAS1B,GAC5D,OAAOwB,EAAW,GAAGG,IAG7B,SAASC,EAAiBJ,EAAYC,EAAKC,EAAS1B,GAChD,OAAOwB,EAAW,IAAMxB,EAClBL,EAAO+B,EAAQD,IAAII,QAASL,EAAW,GAAGxB,EAAGyB,KAC7CC,EAAQD,IAoBlB,SAASK,EAAYC,EAAMC,EAAiBP,EAAKC,EAASO,EAAOC,EAAqBC,GAClF,MAAMC,EAnBV,SAA0BZ,EAAYE,EAASO,EAAOjC,GAClD,GAAIwB,EAAW,IAAMxB,EAAI,CACrB,MAAMqC,EAAOb,EAAW,GAAGxB,EAAGiC,IAC9B,QAAsBK,IAAlBZ,EAAQO,MACR,OAAOI,EAEX,GAAoB,iBAATA,EAAmB,CAC1B,MAAME,EAAS,GACTC,EAAMC,KAAKC,IAAIhB,EAAQO,MAAMU,OAAQN,EAAKM,QAChD,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAKI,GAAK,EAC1BL,EAAOK,GAAKlB,EAAQO,MAAMW,GAAKP,EAAKO,GAExC,OAAOL,EAEX,OAAOb,EAAQO,MAAQI,EAE3B,OAAOX,EAAQO,MAGMY,CAAiBb,EAAiBN,EAASO,EAAOC,GACvE,GAAIE,EAAc,CACd,MAAMU,EAAelB,EAAiBI,EAAiBP,EAAKC,EAASS,GACrEJ,EAAKgB,EAAED,EAAcV,IAG7B,SAASY,EAAuBC,GAC5B,MAAMC,EAAS,GACf,IAAK,MAAMpD,KAAKmD,EACC,MAATnD,EAAE,KACFoD,EAAOpD,GAAKmD,EAAMnD,IAC1B,OAAOoD,EAsBX,SAASC,EAAgBtC,EAAOuC,EAAKC,EAAQD,GAEzC,OADAvC,EAAMyC,IAAID,GACHD,EAuDX,SAASG,EAAOC,EAAQC,GACpBD,EAAOE,YAAYD,GAEvB,SAASE,EAAOH,EAAQC,EAAMG,GAC1BJ,EAAOK,aAAaJ,EAAMG,GAAU,MAExC,SAASE,EAAOL,GACZA,EAAKM,WAAWC,YAAYP,GAQhC,SAASQ,EAAQC,GACb,OAAOC,SAASC,cAAcF,GAuBlC,SAASG,IACL,OAJUC,EAIE,IAHLH,SAASI,eAAeD,GADnC,IAAcA,EASd,SAASE,EAAOf,EAAMgB,EAAOC,EAASC,GAElC,OADAlB,EAAKmB,iBAAiBH,EAAOC,EAASC,GAC/B,IAAMlB,EAAKoB,oBAAoBJ,EAAOC,EAASC,GAuB1D,SAASG,EAAKrB,EAAMsB,EAAW1B,GACd,MAATA,EACAI,EAAKuB,gBAAgBD,GAChBtB,EAAKwB,aAAaF,KAAe1B,GACtCI,EAAKyB,aAAaH,EAAW1B,GA2IrC,IAAI8B,EAiOAC,EAhOJ,SAASC,IACL,QAAoB/C,IAAhB6C,EAA2B,CAC3BA,GAAc,EACd,IAC0B,oBAAXG,QAA0BA,OAAOC,QACnCD,OAAOC,OAAOpB,SAG3B,MAAOqB,GACHL,GAAc,GAGtB,OAAOA,EAqNX,SAASM,EAAsBvE,GAC3BkE,EAAoBlE,EAExB,SAASwE,IACL,IAAKN,EACD,MAAM,IAAIO,MAAM,oDACpB,OAAOP,EAKX,SAASQ,EAAQ5F,GACb0F,IAAwBtE,GAAGyE,SAASvE,KAAKtB,GAK7C,SAAS8F,EAAU9F,GACf0F,IAAwBtE,GAAGC,WAAWC,KAAKtB,GAgB/C,SAAS+F,EAAWC,EAAKC,GACrBP,IAAwBtE,GAAG6E,QAAQ3C,IAAI0C,EAAKC,GAEhD,SAASC,EAAWF,GAChB,OAAON,IAAwBtE,GAAG6E,QAAQE,IAAIH,GAYlD,MAAMI,EAAmB,GAEnBC,EAAoB,GACpBC,EAAmB,GACnBC,EAAkB,GAClBC,EAAmBC,QAAQC,UACjC,IAAIC,GAAmB,EACvB,SAASC,IACAD,IACDA,GAAmB,EACnBH,EAAiBK,KAAKC,IAO9B,SAASC,EAAoB/G,GACzBsG,EAAiBhF,KAAKtB,GAK1B,IAAIgH,GAAW,EACf,MAAMC,EAAiB,IAAIC,IAC3B,SAASJ,IACL,IAAIE,EAAJ,CAEAA,GAAW,EACX,EAAG,CAGC,IAAK,IAAIpE,EAAI,EAAGA,EAAIwD,EAAiBzD,OAAQC,GAAK,EAAG,CACjD,MAAM1B,EAAYkF,EAAiBxD,GACnC6C,EAAsBvE,GACtBiG,EAAOjG,EAAUE,IAGrB,IADAgF,EAAiBzD,OAAS,EACnB0D,EAAkB1D,QACrB0D,EAAkBe,KAAlBf,GAIJ,IAAK,IAAIzD,EAAI,EAAGA,EAAI0D,EAAiB3D,OAAQC,GAAK,EAAG,CACjD,MAAMzB,EAAWmF,EAAiB1D,GAC7BqE,EAAeI,IAAIlG,KAEpB8F,EAAeK,IAAInG,GACnBA,KAGRmF,EAAiB3D,OAAS,QACrByD,EAAiBzD,QAC1B,KAAO4D,EAAgB5D,QACnB4D,EAAgBa,KAAhBb,GAEJI,GAAmB,EACnBK,GAAW,EACXC,EAAeM,SAEnB,SAASJ,EAAO/F,GACZ,GAAoB,OAAhBA,EAAGoG,SAAmB,CACtBpG,EAAG+F,SACH/G,EAAQgB,EAAGqG,eACX,MAAMxF,EAAQb,EAAGa,MACjBb,EAAGa,MAAQ,EAAE,GACbb,EAAGoG,UAAYpG,EAAGoG,SAASzE,EAAE3B,EAAGK,IAAKQ,GACrCb,EAAGsG,aAAapH,QAAQyG,IAiBhC,MAAMY,EAAW,IAAIT,IACrB,IAAIU,EACJ,SAASC,IACLD,EAAS,CACLE,EAAG,EACHC,EAAG,GACHhF,EAAG6E,GAGX,SAASI,IACAJ,EAAOE,GACR1H,EAAQwH,EAAOG,GAEnBH,EAASA,EAAO7E,EAEpB,SAASkF,EAAcC,EAAOC,GACtBD,GAASA,EAAMtF,IACf+E,EAASS,OAAOF,GAChBA,EAAMtF,EAAEuF,IAGhB,SAASE,EAAeH,EAAOC,EAAOrE,EAAQ3C,GAC1C,GAAI+G,GAASA,EAAMI,EAAG,CAClB,GAAIX,EAASN,IAAIa,GACb,OACJP,EAASL,IAAIY,GACbN,EAAOG,EAAEzG,KAAK,KACVqG,EAASS,OAAOF,GACZ/G,IACI2C,GACAoE,EAAMK,EAAE,GACZpH,OAGR+G,EAAMI,EAAEH,IAukBhB,SAASK,EAAiBN,GACtBA,GAASA,EAAMH,IAKnB,SAASU,EAAgBvH,EAAWsC,EAAQI,GACxC,MAAM4D,SAAEA,EAAQ3B,SAAEA,EAAQxE,WAAEA,EAAUqG,aAAEA,GAAiBxG,EAAUE,GACnEoG,GAAYA,EAASkB,EAAElF,EAAQI,GAE/BmD,EAAoB,KAChB,MAAM4B,EAAiB9C,EAAS+C,IAAI7I,GAAK8I,OAAOtI,GAC5Cc,EACAA,EAAWC,QAAQqH,GAKnBvI,EAAQuI,GAEZzH,EAAUE,GAAGyE,SAAW,KAE5B6B,EAAapH,QAAQyG,GAEzB,SAAS+B,EAAkB5H,EAAW6H,GAClC,MAAM3H,EAAKF,EAAUE,GACD,OAAhBA,EAAGoG,WACHpH,EAAQgB,EAAGC,YACXD,EAAGoG,UAAYpG,EAAGoG,SAASe,EAAEQ,GAG7B3H,EAAGC,WAAaD,EAAGoG,SAAW,KAC9BpG,EAAGK,IAAM,IAWjB,SAASuH,EAAK9H,EAAWyD,EAASsE,EAAUC,EAAiBC,EAAWlG,EAAOhB,EAAQ,EAAE,IACrF,MAAMmH,EAAmBhE,EACzBK,EAAsBvE,GACtB,MAAMmI,EAAc1E,EAAQ1B,OAAS,GAC/B7B,EAAKF,EAAUE,GAAK,CACtBoG,SAAU,KACV/F,IAAK,KAELwB,MAAAA,EACAkE,OAAQzH,EACRyJ,UAAAA,EACAG,MAAOrJ,IAEP4F,SAAU,GACVxE,WAAY,GACZoG,cAAe,GACfC,aAAc,GACdzB,QAAS,IAAIsD,IAAIH,EAAmBA,EAAiBhI,GAAG6E,QAAU,IAElEnF,UAAWb,IACXgC,MAAAA,EACAuH,YAAY,GAEhB,IAAIC,GAAQ,EAkBZ,GAjBArI,EAAGK,IAAMwH,EACHA,EAAS/H,EAAWmI,EAAa,CAACzG,EAAGQ,KAAQsG,KAC3C,MAAMrG,EAAQqG,EAAK/G,OAAS+G,EAAK,GAAKtG,EAOtC,OANIhC,EAAGK,KAAO0H,EAAU/H,EAAGK,IAAImB,GAAIxB,EAAGK,IAAImB,GAAKS,MACtCjC,EAAGoI,YAAcpI,EAAGkI,MAAM1G,IAC3BxB,EAAGkI,MAAM1G,GAAGS,GACZoG,GAtCpB,SAAoBvI,EAAW0B,IACI,IAA3B1B,EAAUE,GAAGa,MAAM,KACnBmE,EAAiB9E,KAAKJ,GACtB0F,IACA1F,EAAUE,GAAGa,MAAM0H,KAAK,IAE5BzI,EAAUE,GAAGa,MAAOW,EAAI,GAAM,IAAO,GAAMA,EAAI,GAiC/BgH,CAAW1I,EAAW0B,IAEvBQ,IAET,GACNhC,EAAG+F,SACHsC,GAAQ,EACRrJ,EAAQgB,EAAGqG,eAEXrG,EAAGoG,WAAW0B,GAAkBA,EAAgB9H,EAAGK,KAC/CkD,EAAQnB,OAAQ,CAChB,GAAImB,EAAQkF,QAAS,CACjB,MAAMC,EAtnClB,SAAkB7F,GACd,OAAO8F,MAAMC,KAAK/F,EAAQgG,YAqnCJC,CAASvF,EAAQnB,QAE/BpC,EAAGoG,UAAYpG,EAAGoG,SAAS2C,EAAEL,GAC7BA,EAAMxJ,QAAQwD,QAId1C,EAAGoG,UAAYpG,EAAGoG,SAASO,IAE3BpD,EAAQyF,OACRnC,EAAc/G,EAAUE,GAAGoG,UAC/BiB,EAAgBvH,EAAWyD,EAAQnB,OAAQmB,EAAQf,QACnDkD,IAEJrB,EAAsB2D,GA0C1B,MAAMiB,EACFC,WACIxB,EAAkByB,KAAM,GACxBA,KAAKC,SAAW9K,EAEpB4K,IAAIG,EAAMtJ,GACN,MAAML,EAAayJ,KAAKnJ,GAAGN,UAAU2J,KAAUF,KAAKnJ,GAAGN,UAAU2J,GAAQ,IAEzE,OADA3J,EAAUQ,KAAKH,GACR,KACH,MAAMuJ,EAAQ5J,EAAU6J,QAAQxJ,IACjB,IAAXuJ,GACA5J,EAAU8J,OAAOF,EAAO,IAGpCJ,KAAKO,GAj9CT,IAAkBC,EAk9CNP,KAAKQ,QAl9CCD,EAk9CkBD,EAj9CG,IAA5B3K,OAAO8K,KAAKF,GAAKnI,UAk9ChB4H,KAAKnJ,GAAGoI,YAAa,EACrBe,KAAKQ,MAAMF,GACXN,KAAKnJ,GAAGoI,YAAa,ICp/CjC,MAAMyB,EAAmB,GAgBzB,SAASC,GAAS7H,EAAO8H,EAAQzL,GAC7B,IAAI0L,EACJ,MAAMC,EAAc,GACpB,SAAS/H,EAAIgI,GACT,GAAI7K,EAAe4C,EAAOiI,KACtBjI,EAAQiI,EACJF,GAAM,CACN,MAAMG,GAAaN,EAAiBtI,OACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIyI,EAAY1I,OAAQC,GAAK,EAAG,CAC5C,MAAM4I,EAAIH,EAAYzI,GACtB4I,EAAE,KACFP,EAAiB3J,KAAKkK,EAAGnI,GAE7B,GAAIkI,EAAW,CACX,IAAK,IAAI3I,EAAI,EAAGA,EAAIqI,EAAiBtI,OAAQC,GAAK,EAC9CqI,EAAiBrI,GAAG,GAAGqI,EAAiBrI,EAAI,IAEhDqI,EAAiBtI,OAAS,IA0B1C,MAAO,CAAEW,IAAAA,EAAK6D,OArBd,SAAgBnH,GACZsD,EAAItD,EAAGqD,KAoBWzC,UAlBtB,SAAmBb,EAAK0L,EAAa/L,GACjC,MAAMgM,EAAa,CAAC3L,EAAK0L,GAMzB,OALAJ,EAAY/J,KAAKoK,GACU,IAAvBL,EAAY1I,SACZyI,EAAOD,EAAM7H,IAAQ5D,GAEzBK,EAAIsD,GACG,KACH,MAAMqH,EAAQW,EAAYV,QAAQe,IACnB,IAAXhB,GACAW,EAAYT,OAAOF,EAAO,GAEH,IAAvBW,EAAY1I,SACZyI,IACAA,EAAO,SCxDhB,MAAMO,GAAW,GACXC,GAAQ,GACRC,GAAS,GAGf,SAASC,KACd,OAAO5F,EAAWyF,IAOb,SAASI,KACd,OAAO7F,EAAW2F,IAoBpB,SAASG,GAAYC,EAAOC,GAC1B,MAAMxB,EAAQuB,EAAMtB,QAAQuB,IACvBxB,GAPP,SAAsBuB,EAAOvB,GAC3BuB,EAAMvB,GAASuB,EAAMA,EAAMtJ,OAAS,GACpCsJ,EAAM7E,MAKM+E,CAAaF,EAAOvB,GCtC3B,SAAS0B,GAAcC,GAC5B,GAAqB,iBAAVA,EAAoB,CAK7B,OAAO,IAAIC,aAAa,GAJL,SAARD,IAAqB,IAK1B,MAJa,MAARA,IAAqB,GAK1B,KAJa,IAARA,GAKL,MAIR,OAAOA,EAGF,SAASE,GAAUC,EAAKC,EAASD,GACtC,IAAIE,EAAQ,EACZ,IAAK,IAAI9J,EAAI,EAAGA,EAAI6J,EAAO9J,OAAQC,GAAK,EACtC8J,GAASD,EAAO7J,GAAK6J,EAAO7J,GAG9B,MAAM+J,EAAMlK,KAAKmK,KAAKF,GAMtB,OAJAF,EAAI,GAAKC,EAAO,GAAKE,EACrBH,EAAI,GAAKC,EAAO,GAAKE,EACrBH,EAAI,GAAKC,EAAO,GAAKE,EAEdH,EAYF,SAASK,GAAQ7M,GACtB,MAAM8M,EAAQ,IAAIvD,IAClB,MAAO,IAAIwD,KACT,MAAMC,EAAOC,KAAKC,UAAUH,GAE5B,OADKD,EAAMzF,IAAI2F,IAAOF,EAAMxJ,IAAI0J,EAAMhN,KAAM+M,IACrCD,EAAM3G,IAAI6G,ICxCd,IACIG,GAAqC,oBAAjBb,aAA+BA,aAAevC,MCMtE,SAAS5J,KACd,IAAIqM,EAAM,IAAIY,GAAoB,IAqBlC,OAnBIA,IAAuBd,eACzBE,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,GAGZA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,EAgOF,SAASa,GAAOb,EAAK9L,GAC1B,IAAI4M,EAAM5M,EAAE,GACR6M,EAAM7M,EAAE,GACR8M,EAAM9M,EAAE,GACR+M,EAAM/M,EAAE,GACRgN,EAAMhN,EAAE,GACRiN,EAAMjN,EAAE,GACRkN,EAAMlN,EAAE,GACRmN,EAAMnN,EAAE,GACRoN,EAAMpN,EAAE,GACRqN,EAAMrN,EAAE,GACRsN,EAAMtN,EAAE,IACRuN,EAAMvN,EAAE,IACRwN,EAAMxN,EAAE,IACRyN,EAAMzN,EAAE,IACR0N,EAAM1N,EAAE,IACR2N,EAAM3N,EAAE,IACR4N,EAAMhB,EAAMK,EAAMJ,EAAMG,EACxBa,EAAMjB,EAAMM,EAAMJ,EAAME,EACxBc,EAAMlB,EAAMO,EAAMJ,EAAMC,EACxBe,EAAMlB,EAAMK,EAAMJ,EAAMG,EACxBe,EAAMnB,EAAMM,EAAMJ,EAAME,EACxBgB,EAAMnB,EAAMK,EAAMJ,EAAMG,EACxBgB,EAAMd,EAAMK,EAAMJ,EAAMG,EACxBW,EAAMf,EAAMM,EAAMJ,EAAME,EACxBY,EAAMhB,EAAMO,EAAMJ,EAAMC,EACxBa,EAAMhB,EAAMK,EAAMJ,EAAMG,EACxBa,EAAMjB,EAAMM,EAAMJ,EAAME,EACxBc,EAAMjB,EAAMK,EAAMJ,EAAMG,EAExBc,EAAMZ,EAAMW,EAAMV,EAAMS,EAAMR,EAAMO,EAAMN,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,EAE5E,OAAKM,GAILA,EAAM,EAAMA,EACZ1C,EAAI,IAAMmB,EAAMsB,EAAMrB,EAAMoB,EAAMnB,EAAMkB,GAAOG,EAC/C1C,EAAI,IAAMgB,EAAMwB,EAAMzB,EAAM0B,EAAMxB,EAAMsB,GAAOG,EAC/C1C,EAAI,IAAM2B,EAAMQ,EAAMP,EAAMM,EAAML,EAAMI,GAAOS,EAC/C1C,EAAI,IAAMwB,EAAMU,EAAMX,EAAMY,EAAMV,EAAMQ,GAAOS,EAC/C1C,EAAI,IAAMoB,EAAMkB,EAAMpB,EAAMuB,EAAMpB,EAAMgB,GAAOK,EAC/C1C,EAAI,IAAMc,EAAM2B,EAAMzB,EAAMsB,EAAMrB,EAAMoB,GAAOK,EAC/C1C,EAAI,IAAM4B,EAAMI,EAAMN,EAAMS,EAAMN,EAAME,GAAOW,EAC/C1C,EAAI,IAAMsB,EAAMa,EAAMX,EAAMQ,EAAMP,EAAMM,GAAOW,EAC/C1C,EAAI,IAAMkB,EAAMsB,EAAMrB,EAAMmB,EAAMjB,EAAMe,GAAOM,EAC/C1C,EAAI,IAAMe,EAAMuB,EAAMxB,EAAM0B,EAAMvB,EAAMmB,GAAOM,EAC/C1C,EAAI,KAAO0B,EAAMQ,EAAMP,EAAMK,EAAMH,EAAMC,GAAOY,EAChD1C,EAAI,KAAOuB,EAAMS,EAAMV,EAAMY,EAAMT,EAAMK,GAAOY,EAChD1C,EAAI,KAAOmB,EAAMkB,EAAMnB,EAAMqB,EAAMnB,EAAMgB,GAAOM,EAChD1C,EAAI,KAAOc,EAAMyB,EAAMxB,EAAMsB,EAAMrB,EAAMoB,GAAOM,EAChD1C,EAAI,KAAO2B,EAAMI,EAAML,EAAMO,EAAML,EAAME,GAAOY,EAChD1C,EAAI,KAAOsB,EAAMW,EAAMV,EAAMQ,EAAMP,EAAMM,GAAOY,EACzC1C,GApBE,KAiHJ,SAAS2C,GAAS3C,EAAK9L,EAAGC,GAC/B,IAAI2M,EAAM5M,EAAE,GACR6M,EAAM7M,EAAE,GACR8M,EAAM9M,EAAE,GACR+M,EAAM/M,EAAE,GACRgN,EAAMhN,EAAE,GACRiN,EAAMjN,EAAE,GACRkN,EAAMlN,EAAE,GACRmN,EAAMnN,EAAE,GACRoN,EAAMpN,EAAE,GACRqN,EAAMrN,EAAE,GACRsN,EAAMtN,EAAE,IACRuN,EAAMvN,EAAE,IACRwN,EAAMxN,EAAE,IACRyN,EAAMzN,EAAE,IACR0N,EAAM1N,EAAE,IACR2N,EAAM3N,EAAE,IAER0O,EAAKzO,EAAE,GACP0O,EAAK1O,EAAE,GACP2O,EAAK3O,EAAE,GACP4O,EAAK5O,EAAE,GA6BX,OA5BA6L,EAAI,GAAK4C,EAAK9B,EAAM+B,EAAK3B,EAAM4B,EAAKxB,EAAMyB,EAAKrB,EAC/C1B,EAAI,GAAK4C,EAAK7B,EAAM8B,EAAK1B,EAAM2B,EAAKvB,EAAMwB,EAAKpB,EAC/C3B,EAAI,GAAK4C,EAAK5B,EAAM6B,EAAKzB,EAAM0B,EAAKtB,EAAMuB,EAAKnB,EAC/C5B,EAAI,GAAK4C,EAAK3B,EAAM4B,EAAKxB,EAAMyB,EAAKrB,EAAMsB,EAAKlB,EAC/Ce,EAAKzO,EAAE,GACP0O,EAAK1O,EAAE,GACP2O,EAAK3O,EAAE,GACP4O,EAAK5O,EAAE,GACP6L,EAAI,GAAK4C,EAAK9B,EAAM+B,EAAK3B,EAAM4B,EAAKxB,EAAMyB,EAAKrB,EAC/C1B,EAAI,GAAK4C,EAAK7B,EAAM8B,EAAK1B,EAAM2B,EAAKvB,EAAMwB,EAAKpB,EAC/C3B,EAAI,GAAK4C,EAAK5B,EAAM6B,EAAKzB,EAAM0B,EAAKtB,EAAMuB,EAAKnB,EAC/C5B,EAAI,GAAK4C,EAAK3B,EAAM4B,EAAKxB,EAAMyB,EAAKrB,EAAMsB,EAAKlB,EAC/Ce,EAAKzO,EAAE,GACP0O,EAAK1O,EAAE,GACP2O,EAAK3O,EAAE,IACP4O,EAAK5O,EAAE,IACP6L,EAAI,GAAK4C,EAAK9B,EAAM+B,EAAK3B,EAAM4B,EAAKxB,EAAMyB,EAAKrB,EAC/C1B,EAAI,GAAK4C,EAAK7B,EAAM8B,EAAK1B,EAAM2B,EAAKvB,EAAMwB,EAAKpB,EAC/C3B,EAAI,IAAM4C,EAAK5B,EAAM6B,EAAKzB,EAAM0B,EAAKtB,EAAMuB,EAAKnB,EAChD5B,EAAI,IAAM4C,EAAK3B,EAAM4B,EAAKxB,EAAMyB,EAAKrB,EAAMsB,EAAKlB,EAChDe,EAAKzO,EAAE,IACP0O,EAAK1O,EAAE,IACP2O,EAAK3O,EAAE,IACP4O,EAAK5O,EAAE,IACP6L,EAAI,IAAM4C,EAAK9B,EAAM+B,EAAK3B,EAAM4B,EAAKxB,EAAMyB,EAAKrB,EAChD1B,EAAI,IAAM4C,EAAK7B,EAAM8B,EAAK1B,EAAM2B,EAAKvB,EAAMwB,EAAKpB,EAChD3B,EAAI,IAAM4C,EAAK5B,EAAM6B,EAAKzB,EAAM0B,EAAKtB,EAAMuB,EAAKnB,EAChD5B,EAAI,IAAM4C,EAAK3B,EAAM4B,EAAKxB,EAAMyB,EAAKrB,EAAMsB,EAAKlB,EACzC7B,EAWF,SAASgD,GAAUhD,EAAK9L,EAAG+O,GAChC,IAGInC,EAAKC,EAAKC,EAAKC,EACfC,EAAKC,EAAKC,EAAKC,EACfC,EAAKC,EAAKC,EAAKC,EALfyB,EAAID,EAAE,GACNE,EAAIF,EAAE,GACNG,EAAIH,EAAE,GAyCV,OApCI/O,IAAM8L,GACRA,EAAI,IAAM9L,EAAE,GAAKgP,EAAIhP,EAAE,GAAKiP,EAAIjP,EAAE,GAAKkP,EAAIlP,EAAE,IAC7C8L,EAAI,IAAM9L,EAAE,GAAKgP,EAAIhP,EAAE,GAAKiP,EAAIjP,EAAE,GAAKkP,EAAIlP,EAAE,IAC7C8L,EAAI,IAAM9L,EAAE,GAAKgP,EAAIhP,EAAE,GAAKiP,EAAIjP,EAAE,IAAMkP,EAAIlP,EAAE,IAC9C8L,EAAI,IAAM9L,EAAE,GAAKgP,EAAIhP,EAAE,GAAKiP,EAAIjP,EAAE,IAAMkP,EAAIlP,EAAE,MAE9C4M,EAAM5M,EAAE,GACR6M,EAAM7M,EAAE,GACR8M,EAAM9M,EAAE,GACR+M,EAAM/M,EAAE,GACRgN,EAAMhN,EAAE,GACRiN,EAAMjN,EAAE,GACRkN,EAAMlN,EAAE,GACRmN,EAAMnN,EAAE,GACRoN,EAAMpN,EAAE,GACRqN,EAAMrN,EAAE,GACRsN,EAAMtN,EAAE,IACRuN,EAAMvN,EAAE,IACR8L,EAAI,GAAKc,EACTd,EAAI,GAAKe,EACTf,EAAI,GAAKgB,EACThB,EAAI,GAAKiB,EACTjB,EAAI,GAAKkB,EACTlB,EAAI,GAAKmB,EACTnB,EAAI,GAAKoB,EACTpB,EAAI,GAAKqB,EACTrB,EAAI,GAAKsB,EACTtB,EAAI,GAAKuB,EACTvB,EAAI,IAAMwB,EACVxB,EAAI,IAAMyB,EACVzB,EAAI,IAAMc,EAAMoC,EAAIhC,EAAMiC,EAAI7B,EAAM8B,EAAIlP,EAAE,IAC1C8L,EAAI,IAAMe,EAAMmC,EAAI/B,EAAMgC,EAAI5B,EAAM6B,EAAIlP,EAAE,IAC1C8L,EAAI,IAAMgB,EAAMkC,EAAI9B,EAAM+B,EAAI3B,EAAM4B,EAAIlP,EAAE,IAC1C8L,EAAI,IAAMiB,EAAMiC,EAAI7B,EAAM8B,EAAI1B,EAAM2B,EAAIlP,EAAE,KAGrC8L,EAopBF,SAASqD,GAA6BrD,EAAKsD,EAAGL,EAAGjE,GAEtD,IAAIkE,EAAII,EAAE,GACNH,EAAIG,EAAE,GACNF,EAAIE,EAAE,GACNC,EAAID,EAAE,GACNE,EAAKN,EAAIA,EACTO,EAAKN,EAAIA,EACTO,EAAKN,EAAIA,EACTO,EAAKT,EAAIM,EACTI,EAAKV,EAAIO,EACTI,EAAKX,EAAIQ,EACTI,EAAKX,EAAIM,EACTM,EAAKZ,EAAIO,EACTM,EAAKZ,EAAIM,EACTO,EAAKV,EAAIC,EACTU,EAAKX,EAAIE,EACTU,EAAKZ,EAAIG,EACTU,EAAKpF,EAAE,GACPqF,EAAKrF,EAAE,GACPsF,EAAKtF,EAAE,GAiBX,OAhBAgB,EAAI,IAAM,GAAK8D,EAAKE,IAAOI,EAC3BpE,EAAI,IAAM4D,EAAKO,GAAMC,EACrBpE,EAAI,IAAM6D,EAAKK,GAAME,EACrBpE,EAAI,GAAK,EACTA,EAAI,IAAM4D,EAAKO,GAAME,EACrBrE,EAAI,IAAM,GAAK2D,EAAKK,IAAOK,EAC3BrE,EAAI,IAAM+D,EAAKE,GAAMI,EACrBrE,EAAI,GAAK,EACTA,EAAI,IAAM6D,EAAKK,GAAMI,EACrBtE,EAAI,IAAM+D,EAAKE,GAAMK,EACrBtE,EAAI,KAAO,GAAK2D,EAAKG,IAAOQ,EAC5BtE,EAAI,IAAM,EACVA,EAAI,IAAMiD,EAAE,GACZjD,EAAI,IAAMiD,EAAE,GACZjD,EAAI,IAAMiD,EAAE,GACZjD,EAAI,IAAM,EACHA,EAwWF,SAASuE,GAASvE,EAAKwE,EAAKxN,EAAQyN,GACzC,IAAIC,EAAOF,EAAI,GACXG,EAAOH,EAAI,GACXI,EAAOJ,EAAI,GACXK,EAAMJ,EAAG,GACTK,EAAML,EAAG,GACTM,EAAMN,EAAG,GACTO,EAAKN,EAAO1N,EAAO,GACnBiO,EAAKN,EAAO3N,EAAO,GACnB0M,EAAKkB,EAAO5N,EAAO,GACnBhB,EAAMgP,EAAKA,EAAKC,EAAKA,EAAKvB,EAAKA,EAE/B1N,EAAM,IAERgP,GADAhP,EAAM,EAAIC,KAAKmK,KAAKpK,GAEpBiP,GAAMjP,EACN0N,GAAM1N,GAGR,IAAIkP,EAAKJ,EAAMpB,EAAKqB,EAAME,EACtBE,EAAKJ,EAAMC,EAAKH,EAAMnB,EACtBF,EAAKqB,EAAMI,EAAKH,EAAME,EA0B1B,OAzBAhP,EAAMkP,EAAKA,EAAKC,EAAKA,EAAK3B,EAAKA,GAErB,IAER0B,GADAlP,EAAM,EAAIC,KAAKmK,KAAKpK,GAEpBmP,GAAMnP,EACNwN,GAAMxN,GAGRgK,EAAI,GAAKkF,EACTlF,EAAI,GAAKmF,EACTnF,EAAI,GAAKwD,EACTxD,EAAI,GAAK,EACTA,EAAI,GAAKiF,EAAKzB,EAAKE,EAAKyB,EACxBnF,EAAI,GAAK0D,EAAKwB,EAAKF,EAAKxB,EACxBxD,EAAI,GAAKgF,EAAKG,EAAKF,EAAKC,EACxBlF,EAAI,GAAK,EACTA,EAAI,GAAKgF,EACThF,EAAI,GAAKiF,EACTjF,EAAI,IAAM0D,EACV1D,EAAI,IAAM,EACVA,EAAI,IAAM0E,EACV1E,EAAI,IAAM2E,EACV3E,EAAI,IAAM4E,EACV5E,EAAI,IAAM,EACHA,ECjkDF,SAASrM,KACd,IAAIqM,EAAM,IAAIY,GAAoB,GAQlC,OANIA,IAAuBd,eACzBE,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAGJA,EAsCF,SAASoF,GAAWlC,EAAGC,EAAGC,GAC/B,IAAIpD,EAAM,IAAIY,GAAoB,GAIlC,OAHAZ,EAAI,GAAKkD,EACTlD,EAAI,GAAKmD,EACTnD,EAAI,GAAKoD,EACFpD,EAgRF,SAASD,GAAUC,EAAK9L,GAC7B,IAAIgP,EAAIhP,EAAE,GACNiP,EAAIjP,EAAE,GACNkP,EAAIlP,EAAE,GACN8B,EAAMkN,EAAIA,EAAIC,EAAIA,EAAIC,EAAIA,EAU9B,OARIpN,EAAM,IAERA,EAAM,EAAIC,KAAKmK,KAAKpK,IAGtBgK,EAAI,GAAK9L,EAAE,GAAK8B,EAChBgK,EAAI,GAAK9L,EAAE,GAAK8B,EAChBgK,EAAI,GAAK9L,EAAE,GAAK8B,EACTgK,EAsBF,SAASqF,GAAMrF,EAAK9L,EAAGC,GAC5B,IAAImR,EAAKpR,EAAE,GACPqR,EAAKrR,EAAE,GACPsR,EAAKtR,EAAE,GACPuR,EAAKtR,EAAE,GACPuR,EAAKvR,EAAE,GACPwR,EAAKxR,EAAE,GAIX,OAHA6L,EAAI,GAAKuF,EAAKI,EAAKH,EAAKE,EACxB1F,EAAI,GAAKwF,EAAKC,EAAKH,EAAKK,EACxB3F,EAAI,GAAKsF,EAAKI,EAAKH,EAAKE,EACjBzF,EAiGF,SAAS4F,GAAc5F,EAAK9L,EAAGgI,GACpC,IAAIgH,EAAIhP,EAAE,GACNiP,EAAIjP,EAAE,GACNkP,EAAIlP,EAAE,GACNqP,EAAIrH,EAAE,GAAKgH,EAAIhH,EAAE,GAAKiH,EAAIjH,EAAE,IAAMkH,EAAIlH,EAAE,IAK5C,OAJAqH,EAAIA,GAAK,EACTvD,EAAI,IAAM9D,EAAE,GAAKgH,EAAIhH,EAAE,GAAKiH,EAAIjH,EAAE,GAAKkH,EAAIlH,EAAE,KAAOqH,EACpDvD,EAAI,IAAM9D,EAAE,GAAKgH,EAAIhH,EAAE,GAAKiH,EAAIjH,EAAE,GAAKkH,EAAIlH,EAAE,KAAOqH,EACpDvD,EAAI,IAAM9D,EAAE,GAAKgH,EAAIhH,EAAE,GAAKiH,EAAIjH,EAAE,IAAMkH,EAAIlH,EAAE,KAAOqH,EAC9CvD,EFhcJ/J,KAAK4P,QAAO5P,KAAK4P,MAAQ,WAI5B,IAHA,IAAI1C,EAAI,EACJ/M,EAAI0P,UAAU3P,OAEXC,KACL+M,GAAK2C,UAAU1P,GAAK0P,UAAU1P,GAGhC,OAAOH,KAAKmK,KAAK+C,KE+qBZ,IAqBD4C,GArBK/P,GAnrBJ,SAAgB9B,GACrB,IAAIgP,EAAIhP,EAAE,GACNiP,EAAIjP,EAAE,GACNkP,EAAIlP,EAAE,GACV,OAAO+B,KAAK4P,MAAM3C,EAAGC,EAAGC,IAosBpB2C,GAAMpS,+DC3UKsB,YAAgBA,6PAD1BA,iNPnBP,SAA6BgC,EAAMzD,GAC/B,MAAMwS,EAAiBC,iBAAiBhP,GAClCiP,GAAWC,SAASH,EAAeI,SAAW,GAAK,EACzB,WAA5BJ,EAAeK,WACfpP,EAAKqP,MAAMD,SAAW,YAE1B,MAAME,EAAS9O,EAAQ,UACvB8O,EAAO7N,aAAa,QAChB,2JAA2EwN,MAC/EK,EAAO7N,aAAa,cAAe,QACnC6N,EAAOC,UAAY,EACnB,MAAM7N,EAAcE,IACpB,IAAIrE,EAeJ,OAdImE,GACA4N,EAAOlT,IAAM,kFACbmB,EAAcwD,EAAOc,OAAQ,UAAYb,IACjCA,EAAMwO,SAAWF,EAAOG,eACxBlT,QAIR+S,EAAOlT,IAAM,cACbkT,EAAOI,OAAS,KACZnS,EAAcwD,EAAOuO,EAAOG,cAAe,SAAUlT,KAG7DuD,EAAOE,EAAMsP,GACN,MACC5N,GAGKnE,GAAe+R,EAAOG,gBAF3BlS,IAKJ8C,EAAOiP,mCOfRtR,8LAvZI2R,GAAe3P,SNPf,CACH7C,UAAWsK,IMOC,EAAO5H,OACe,oBAAzB+P,4BACHC,MAAeD,qBAAqBE,IAExCjQ,WAnBiBkQ,SAIjBC,EAAMD,EAAGE,+BAGbD,EAAIE,OAAS,GACbF,EAAIG,MAAS,GACbH,EAAII,IAASvO,OAAOwO,aACpBL,EAAIM,KAASzO,OAAO0O,WASZC,CAAgBxQ,aAGtB6P,EAASY,QAAQzQ,OACJ6P,EAASa,UAAU1Q,MAGZ,oBAAX6B,iBACAZ,cACCmP,EAAGF,OAAEA,GAAWlQ,EAAKiQ,wBAC7BpQ,EAAIqQ,EAAS,GAAKE,EAAMvO,OAAOwO,oBAGjCxO,OAAOV,iBAAiB,SAAUF,GAClCY,OAAOV,iBAAiB,SAAUF,QAGhCY,OAAOT,oBAAoB,SAAUH,GACrCY,OAAOT,oBAAoB,SAAUH,ON7BL9D,2HM4C7BwT,GAAc,EAAG,EAAG,yBACpBC,EAAoB,UACpBC,iBACAC,WAELC,EAAU,QAAS3J,MAIrB4J,EACAC,EAAUxJ,IAAS,WAMnByJ,EALAC,GAAU,EACVjO,GAAmB,EAKnBkO,SACAC,GACFC,cAAe7J,KACf8J,KAAM9J,KACN+J,WAAY/J,YAGRO,EAA+B,oBAAXnG,YAEjBqB,IACHA,GAAmB,EACnBuO,sBAAsBL,YAKtBM,EAAQjK,GAAS,4BACjBkK,EAASlK,GAAS,4BAElBmK,ELlDD,SAASC,EAAa5K,EAAOe,GAClC,IAAI8J,EAAc,EAElB,MAAMC,EAAS,GACTC,EAAqB,GACrBC,EAAe,GAEfC,EAAQ,CACZjL,MAAO,EACP8K,OAAAA,EACAC,mBAAAA,EACAC,aAAAA,EACAE,YAAY,EACZC,yBAAyB,EACzBC,SAAU,CAACC,EAAMC,KACXA,GACFhK,GAAY+J,EAAKE,YAAcT,EAASC,EAAoBM,GAG1DA,EAAKE,aACPR,EAAmBnU,KAAKyU,GACxBJ,EAAME,yBAA0B,GAEhCL,EAAOlU,KAAKyU,GAGdjQ,EAAU,KACRkG,GAAYwJ,EAAQO,GACpB/J,GAAYyJ,EAAoBM,GAChCtK,OAGJyK,UAAW,CAACxL,EAAQ6K,OAClB,MAAMY,EAAcb,EAAa5K,EAAOe,GAYxC,OAXAiK,EAAapU,KAAK6U,GAElBR,EAAMC,YAAa,EAEnB9P,EAAU,KACRkG,GAAY0J,EAAcS,GAE1BR,EAAMC,YAAa,EACnBnK,MAGK0K,IAIX,OAAOR,EKCYL,CAAa,EAAG7J,GAE7B2K,SACFC,EAASD,QAMPE,GACJC,WACAC,eACAC,mBAGOC,EAAOzK,UACPjM,IACLiM,EAAM3K,KAAKtB,GACXyL,IAEA3F,aACQlD,EAAIqJ,EAAMtB,QAAQ3K,IACnB4C,GAAGqJ,EAAMrB,OAAOhI,EAAG,GACxB6I,aAKAkL,MAAcpN,QAChBqN,GAA4C,QAE1CC,GACJC,kDAEqBtC,OACnBuC,KAAK,IAEPC,WAAYC,OACNZ,GAAUA,IAAWD,YACbzQ,0CAGZ0Q,EAASY,EACTxL,IAGAqJ,EAAcC,cAAczR,IAAI+S,EAAOa,QACvCpC,EAAcG,WAAW3R,IAAI+S,EAAOpB,YACpCH,EAAcE,KAAK1R,IAAI+S,EAAOrB,MAE9BlP,OACEuQ,EAASD,EACT3K,OAIJ0L,cAAed,IAEbvB,EAAcC,cAAczR,IAAI+S,EAAOa,QACvCpC,EAAcE,KAAK1R,IAAI+S,EAAOrB,MAC9BF,EAAcG,WAAW3R,IAAI+S,EAAOpB,YAEpC2B,GAA4C,EAC5CnL,KAGF2L,sBAAuBV,EAAOJ,EAAOE,aACrCa,gBAAiBX,EAAOJ,EAAOG,OAC/Ba,kBAAmBZ,EAAOJ,EAAOC,SAEjCgB,WAAWC,IACJb,EAAQtP,IAAImQ,IAAKb,EAAQrT,IAAIkU,EAAItM,GAAS,OACxCyL,EAAQxQ,IAAIqR,IAGrB/L,WAAAA,KAEGqJ,EAEHK,MAAAA,EACAC,OAAAA,GAGFrP,EAAW4F,GAAUkL,GACrB9Q,EAAW6F,GAAOyJ,SAEZoC,IFIiBjL,EEJMkL,MFKzB,GAAK,EACTlL,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EACHA,GAjBF,IAAkBA,QEHjBmL,EAAMzM,GAASuM,GACrB1R,EAAW8F,IACT+L,qBAAwBH,EACxBE,KAAO/W,UAAW+W,EAAI/W,aAGxBgF,YACEiR,EAAMpC,OAASA,SACfE,OAAKkC,EAAMlC,GAAKF,EAAOvO,WAAW,mBAClCwO,EAAUtB,GAAeqB,MAGvB,yBACA,4BAGSnU,QAAQ4D,QACLyQ,EAAGkD,aAAa3T,aAEhByB,gCAAgCzB,KAI9C2Q,EAAOiD,QACAzB,YAED0B,SACIC,EAAMzD,GAAcjP,OAAO2S,kBAAoB,MACrDxD,EAAOU,MAAQ+C,EAASF,SACxBvD,EAAOW,OAAS+C,EAAUH,KAC1BrD,EAAGyD,SAAS,EAAG,EAAGF,EAASF,EAAKG,EAAUH,GAE1CD,GAAyB,KAG3BpR,GAAmB,GAEd0R,IAAaP,mBAChBlD,GAAU,QAIZA,GAAU,GAEVD,EAAG2D,cAAcC,EAAIlE,GACrBM,EAAGpN,MAAMoN,EAAG6D,iBAAmB7D,EAAG8D,kBAElC9D,EAAG+D,OAAO/D,EAAGgE,WACbhE,EAAG+D,OAAO/D,EAAGiE,aAGPC,EAAgBvC,EAAOC,QAAQuC,QAAQpM,GAASL,MAAAA,EAAO0M,UAAAA,MAEzDtW,KAAKuW,IAAItM,EAAM,GAAKL,EAAM,GAAK0M,EAAW,GAC1CtW,KAAKuW,IAAItM,EAAM,GAAKL,EAAM,GAAK0M,EAAW,GAC1CtW,KAAKuW,IAAItM,EAAM,GAAKL,EAAM,GAAK0M,EAAW,QAEvCzM,cAAc,EAAG,EAAG,SAEvB2M,EAEAC,IACDvE,EAAGwE,YAAa,MAChBxE,EAAGgE,WAAY,YAGZD,GAAU1S,EAAKoT,KACfF,EAAelT,KAASoT,IACtBA,EAASzE,EAAG+D,OAAO1S,GAClB2O,EAAG0E,QAAQrT,GAEhBkT,EAAelT,GAAOoT,aAIjBE,SACPC,EAAKC,wBACLA,EAAuBC,SACvBA,EAAQC,SACRA,EAAQC,UACRA,EAASC,YACTA,OAGKF,MAELhB,EAAO/D,EAAGwE,YAA0B,IAAdQ,GACtBjB,EAAO/D,EAAGgE,WAA2B,IAAhBiB,GAErBjF,EAAGkF,kBACDlF,EAAGmF,UACHnF,EAAGoF,oBACHpF,EAAGmF,UACHnF,EAAGqF,KAGDN,EAASO,UAAYhB,MACvBA,EAAmBS,EAASO,QAG5BtF,EAAGuF,WAAWR,EAASO,SAGvBtF,EAAGwF,WAAWT,EAASU,kBAAkBC,cAAexB,GAEpDrE,IACFG,EAAGwF,WAAWT,EAASU,kBAAkBE,UAAW/B,GACpD5D,EAAG4F,UAAUb,EAASU,kBAAkBI,YAAalG,IAGnDoF,EAASU,kBAAkBK,2BACpB7X,EAAI,EAAGA,EAlMP,EAkMuBA,GAAK,SAC7B8X,EAAQpE,EAAOE,YAAY5T,OAC5B8X,QAEL/F,EAAGwF,WAAWT,EAASU,kBAAkBK,mBAAmB7X,GAAG+X,UAAWD,EAAMC,WAChFhG,EAAGwF,WAAWT,EAASU,kBAAkBK,mBAAmB7X,GAAGyJ,MAAOqO,EAAMrO,OAC5EsI,EAAG4F,UAAUb,EAASU,kBAAkBK,mBAAmB7X,GAAGmW,UAAW2B,EAAM3B,cAI/EW,EAASU,kBAAkBQ,qBACpBhY,EAAI,EAAGA,EA7MP,EA6MuBA,GAAK,SAC7B8X,EAAQpE,EAAOG,MAAM7T,OACtB8X,QAEL/F,EAAGwF,WAAWT,EAASU,kBAAkBQ,aAAahY,GAAGiY,SAAUH,EAAMG,UACzElG,EAAGwF,WAAWT,EAASU,kBAAkBQ,aAAahY,GAAGyJ,MAAOqO,EAAMrO,OACtEsI,EAAG4F,UAAUb,EAASU,kBAAkBQ,aAAahY,GAAGmW,UAAW2B,EAAM3B,WAI7EpE,EAAGwF,WAAWT,EAASU,kBAAkBU,sBAAuBzE,EAAO0E,gBACvEpG,EAAGqG,iBAAiBtB,EAASU,kBAAkBa,MAAM,EAAO5E,EAAOrB,MACnEL,EAAGqG,iBAAiBtB,EAASU,kBAAkBc,YAAY,EAAO7E,EAAOpB,eAI3EN,EAAGqG,iBAAiBtB,EAASU,kBAAkBe,OAAO,EAAO5B,GAC7D5E,EAAGqG,iBAAiBtB,EAASU,kBAAkBgB,yBAAyB,EAAO5B,GAG/EE,EAAS2B,eAAe1G,GAGxB8E,EAAS6B,eAAe3G,GAGpB8E,EAAS/O,MACXiK,EAAG4G,WAAW5G,EAAG6G,qBAAsB/B,EAASgC,QAAQC,SACxD/G,EAAGgH,aAAahH,EAAG8E,EAASmC,WAAYnC,EAAS/O,MAAM/H,OAAQgS,EAAGkH,aAAc,cAE1EC,EAAgBnH,EAAG8E,EAASmC,WAClCjH,EAAGoH,WAAWD,EAAe,EAAGrC,EAASuC,mBAIpCC,EAAatG,GAChBA,EAAMC,aACRD,EAAMD,aAAawG,MAAMxb,EAAGC,IAAMD,EAAEgK,MAAQ/J,EAAE+J,OAC9CiL,EAAMC,YAAa,GAGrBjB,EAAGwH,WAAU,GACbxH,EAAGyH,WAAW,GACdzH,EAAGpN,MAAMoN,EAAG8D,0BAEH7V,EAAI,EAAGA,EAAI+S,EAAMH,OAAO7S,OAAQC,GAAK,EAC5C0W,EAAY3D,EAAMH,OAAO5S,IAI3B+R,EAAGwH,WAAU,IAETvF,GAA6CjB,EAAME,2BACrDwG,EAAwB1G,EAAMF,oBAC9BE,EAAME,yBAA0B,WAGzBjT,EAAI,EAAGA,EAAI+S,EAAMF,mBAAmB9S,OAAQC,GAAK,EACxD0W,EAAY3D,EAAMF,mBAAmB7S,YAG9BA,EAAI,EAAGA,EAAI+S,EAAMD,aAAa/S,OAAQC,GAAK,EAClDqZ,EAAatG,EAAMD,aAAa9S,IAIpCqZ,CAAa5G,GACbuB,GAA4C,SAKxC0F,EAAUC,oBACdrE,EAASzD,EAAO+H,iBAChBrE,EAAU1D,EAAOgI,uBPkTnB7V,IACOJ,GOhTAK,SAAWgO,GAAK,SAGrBF,EAAGkD,aAAa,sBAAsB6E,cACtCC,aAAaL,YAIXD,EAA0B7G,OAC1BA,EAAO7S,OAAS,eAEdia,MAAarT,IACbiD,MAAUF,aAAa,IAE7BkJ,EAAOlV,QAAQyV,UACPnG,EAAIiN,GAAcrQ,EAAK6J,EAAOrB,KAAMe,EAAKwD,OAAO,IACtDqD,EAAOtZ,IAAIyS,EAAMnG,KAGnB4F,EAAO0G,MAAMxb,EAAGC,IAAMic,EAAOzW,IAAIzF,GAAKkc,EAAOzW,IAAIxF,SAG/CoX,GAAyB,8SAjV1BQ,EAAKnM,GAAcgI,uBAoVpB2D,GAAyB,EACzBtM,4BAIsCoL,EAAMpL,oCACvC4M,GAAYzD,GAASiC,EAAMpL,uFAcfgJ,yBADoByD,4BAA2BC,4JCgN/C,WACnB,IAzmBI3L,EAymBA+F,GAzmBA/F,EAAM,IAAIY,GAAoB,GAE9BA,IAAuBd,eACzBE,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAGJA,GA+lBY,GCtmBd,SAASrM,KACd,IAAIqM,EAAM,IAAIY,GAAoB,GASlC,OAPIA,IAAuBd,eACzBE,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,GAGXA,EAAI,GAAK,EACFA,EAmQF,SAASsQ,GAAMtQ,EAAK9L,EAAGC,EAAGoc,GAG/B,IAQIC,EAAOC,EAAOC,EAAOC,EAAQC,EAR7BtL,EAAKpR,EAAE,GACPqR,EAAKrR,EAAE,GACPsR,EAAKtR,EAAE,GACP2c,EAAK3c,EAAE,GACPuR,EAAKtR,EAAE,GACPuR,EAAKvR,EAAE,GACPwR,EAAKxR,EAAE,GACP2c,EAAK3c,EAAE,GAgCX,OA7BAsc,EAAQnL,EAAKG,EAAKF,EAAKG,EAAKF,EAAKG,EAAKkL,EAAKC,GAE/B,IACVL,GAASA,EACThL,GAAMA,EACNC,GAAMA,EACNC,GAAMA,EACNmL,GAAMA,GAIJ,EAAML,EL/SS,MKiTjBD,EAAQva,KAAK8a,KAAKN,GAClBC,EAAQza,KAAK+a,IAAIR,GACjBG,EAAS1a,KAAK+a,KAAK,EAAMT,GAAKC,GAASE,EACvCE,EAAS3a,KAAK+a,IAAIT,EAAIC,GAASE,IAI/BC,EAAS,EAAMJ,EACfK,EAASL,GAIXvQ,EAAI,GAAK2Q,EAASrL,EAAKsL,EAASnL,EAChCzF,EAAI,GAAK2Q,EAASpL,EAAKqL,EAASlL,EAChC1F,EAAI,GAAK2Q,EAASnL,EAAKoL,EAASjL,EAChC3F,EAAI,GAAK2Q,EAASE,EAAKD,EAASE,EACzB9Q,EAqHF,SAASiR,GAAUjR,EAAKkD,EAAGC,EAAGC,GACnC,IAAI8N,EAAY,GAAMjb,KAAKkb,GAAK,IAChCjO,GAAKgO,EACL/N,GAAK+N,EACL9N,GAAK8N,EACL,IAAI9M,EAAKnO,KAAK+a,IAAI9N,GACdkO,EAAKnb,KAAKob,IAAInO,GACdmB,EAAKpO,KAAK+a,IAAI7N,GACdmO,EAAKrb,KAAKob,IAAIlO,GACdmB,EAAKrO,KAAK+a,IAAI5N,GACdmO,EAAKtb,KAAKob,IAAIjO,GAKlB,OAJApD,EAAI,GAAKoE,EAAKkN,EAAKC,EAAKH,EAAK/M,EAAKC,EAClCtE,EAAI,GAAKoR,EAAK/M,EAAKkN,EAAKnN,EAAKkN,EAAKhN,EAClCtE,EAAI,GAAKoR,EAAKE,EAAKhN,EAAKF,EAAKC,EAAKkN,EAClCvR,EAAI,GAAKoR,EAAKE,EAAKC,EAAKnN,EAAKC,EAAKC,EAC3BtE,EAgJF,IAgCDwR,GACAC,GACAC,GAuCAC,GACAC,GCvpBA5R,GD2qBA6R,GA9FK9R,GDlPJ,SAAmBC,EAAK9L,GAC7B,IAAIgP,EAAIhP,EAAE,GACNiP,EAAIjP,EAAE,GACNkP,EAAIlP,EAAE,GACNqP,EAAIrP,EAAE,GACN8B,EAAMkN,EAAIA,EAAIC,EAAIA,EAAIC,EAAIA,EAAIG,EAAIA,EAUtC,OARIvN,EAAM,IACRA,EAAM,EAAIC,KAAKmK,KAAKpK,IAGtBgK,EAAI,GAAKkD,EAAIlN,EACbgK,EAAI,GAAKmD,EAAInN,EACbgK,EAAI,GAAKoD,EAAIpN,EACbgK,EAAI,GAAKuD,EAAIvN,EACNgK,GCmQHwR,GAAUM,KACVL,GAAYM,GAAgB,EAAG,EAAG,GAClCL,GAAYK,GAAgB,EAAG,EAAG,GAuClCJ,GAAQhe,KACRie,GAAQje,KCvpBRqM,GAAM,IAAIY,GAAoB,GAE9BA,IAAuBd,eACzBE,GAAI,GAAK,EACTA,GAAI,GAAK,EACTA,GAAI,GAAK,EACTA,GAAI,GAAK,EACTA,GAAI,GAAK,EACTA,GAAI,GAAK,GAGXA,GAAI,GAAK,EACTA,GAAI,GAAK,EACTA,GAAI,GAAK,ED8pBL6R,GC7pBG7R,uSCrBIqO,GAAY,EAAG,EAAG,cAClB2D,SACAvN,GAAM,EAAG,EAAG,gBACZwN,GAAY,EAAG,EAAG,aAClBC,EAAQ,WAEb7H,EAAQ/K,KACRvG,EAASwG,MAEP4L,IAAKgH,GAAepZ,4BACtBoS,EAAMzM,GAAS,8BAEjBgM,EAASQ,KACTkH,EAAaC,WACX9D,MAAqBzO,aAAa4K,EAAO4H,OAAQ,GAAQ,ITO1D,SAAoBvZ,GACzBQ,EAAW8F,GAAQtG,GSenBwZ,EAAapH,IAAAA,qRArBVqH,EAA+B,iBAAVN,GAAsBA,EAAOA,EAAOA,GAASA,uBAElElb,EAASgb,EAAS3H,EAAMU,WAAWiH,GAAUtT,GAAS,mDAElD+T,GACLC,GAAehI,EAAQiI,EAAatE,GACpCuE,GAAclI,EAAQ6D,EAAgBkE,EAAShO,GN4e5C,SAAezE,EAAK9L,EAAG+O,GAC5B,IAAIC,EAAID,EAAE,GACNE,EAAIF,EAAE,GACNG,EAAIH,EAAE,GACVjD,EAAI,GAAK9L,EAAE,GAAKgP,EAChBlD,EAAI,GAAK9L,EAAE,GAAKgP,EAChBlD,EAAI,GAAK9L,EAAE,GAAKgP,EAChBlD,EAAI,GAAK9L,EAAE,GAAKgP,EAChBlD,EAAI,GAAK9L,EAAE,GAAKiP,EAChBnD,EAAI,GAAK9L,EAAE,GAAKiP,EAChBnD,EAAI,GAAK9L,EAAE,GAAKiP,EAChBnD,EAAI,GAAK9L,EAAE,GAAKiP,EAChBnD,EAAI,GAAK9L,EAAE,GAAKkP,EAChBpD,EAAI,GAAK9L,EAAE,GAAKkP,EAChBpD,EAAI,IAAM9L,EAAE,IAAMkP,EAClBpD,EAAI,IAAM9L,EAAE,IAAMkP,EAClBpD,EAAI,IAAM9L,EAAE,IACZ8L,EAAI,IAAM9L,EAAE,IACZ8L,EAAI,IAAM9L,EAAE,IACZ8L,EAAI,IAAM9L,EAAE,IM9fV2e,CAAWnI,EAAQA,EAAQ8H,OAE3BM,EAAOpI,UAEP0H,EAAaW,GAAeX,GAAcC,QAAkBJ,SAC5DvH,EAASsI,GAAkCtI,EAAQ0H,EAAY/D,EAAUmE,QACzEM,EAAOzC,GAAcyC,GAAQ5H,KAAeyH,EAAajI,wBAMjDL,EAAMpL,+ICzClB,MAAMgU,GAAS,IAAIlW,IAEbmW,GAAU,CACdC,KAAS,CAAChL,EAAIiL,EAAKtb,IAASqQ,EAAG4F,UAAUqF,EAAKtb,GAC9Cub,MAAS,CAAClL,EAAIiL,EAAKtb,IAASqQ,EAAGmL,WAAWF,EAAKtb,GAC/Cyb,MAAS,CAACpL,EAAIiL,EAAKtb,IAASqQ,EAAGwF,WAAWyF,EAAKtb,GAC/C0b,MAAS,CAACrL,EAAIiL,EAAKtb,IAASqQ,EAAGsL,WAAWL,EAAKtb,GAE/C4b,MAAS,CAACvL,EAAIiL,EAAKtb,IAASqQ,EAAGwL,iBAAiBP,GAAK,EAAOtb,GAC5D8b,MAAS,CAACzL,EAAIiL,EAAKtb,IAASqQ,EAAG0L,iBAAiBT,GAAK,EAAOtb,GAC5Dgc,MAAS,CAAC3L,EAAIiL,EAAKtb,IAASqQ,EAAGqG,iBAAiB4E,GAAK,EAAOtb,GAE5Dic,MAAS,CAAC5L,EAAIiL,EAAKtb,KACjBqQ,EAAG6L,cAAc7L,EAAG,UAAUrQ,EAAKoG,QACnCiK,EAAG8L,YAAY9L,EAAG+L,WAAYpc,EAAKqc,SACnChM,EAAGiM,UAAUhB,EAAKtb,EAAKoG,SAIpB,SAASmW,GAAQlM,EAAImM,EAAMC,GAC3BtB,GAAOpY,IAAIsN,IAAK8K,GAAOnc,IAAIqR,EAAI,IAAIpL,KACxC,MAAMuD,EAAQ2S,GAAOtZ,IAAIwO,GAEnB3H,EAAO8T,EAAOC,EACpB,IAAKjU,EAAMzF,IAAI2F,GAAO,CACpB,MAAMiN,EAwEV,SAAwBtF,EAAImM,EAAMC,GAChC,MAAM9G,EAAUtF,EAAGqM,gBAEnBrM,EAAGsM,aAAahH,EAASiH,GAAcvM,EAAIA,EAAGwM,cAAeL,EAAM,WACnEnM,EAAGsM,aAAahH,EAASiH,GAAcvM,EAAIA,EAAGyM,gBAAiBL,EAAM,aACrEpM,EAAG0M,YAAYpH,GAGf,IADgBtF,EAAG2M,oBAAoBrH,EAAStF,EAAG4M,aAGjD,MADAC,QAAQC,IAAI9M,EAAG+M,kBAAkBzH,IAC3B,IAAItU,MAAM,+BAA+BgP,EAAG+M,kBAAkBzH,IAGtE,OAAOA,EArFW0H,CAAehN,EAAImM,EAAMC,GACnCa,EAuFV,SAAsBjN,EAAIsF,GACxB,MAAM2H,EAAW,GAEXC,EAAIlN,EAAG2M,oBAAoBrH,EAAStF,EAAGmN,iBAE7C,IAAK,IAAIlf,EAAI,EAAGA,EAAIif,EAAGjf,GAAK,EAAG,CAC7B,IAAImf,KAAEA,EAAItX,KAAEA,EAAIvG,KAAEA,GAASyQ,EAAGqN,iBAAiB/H,EAASrX,GACxD,MAAMgd,EAAMjL,EAAGsN,mBAAmBhI,EAAS/V,GACrCge,EAASxC,GAAQjV,GAEvB,IAAKyX,EACH,MAAM,IAAIvc,MAAM,mBAAmB8E,MAASvG,MAG9C0d,EAAStgB,KAAK,CAAEygB,KAAAA,EAAMtX,KAAAA,EAAMvG,KAAAA,EAAMge,OAAAA,EAAQtC,IAAAA,IAG5C,OAAOgC,EAxGYO,CAAaxN,EAAIsF,GAC5BmI,EA0GV,SAAwBzN,EAAIsF,GAC1B,MAAMmI,EAAa,GAEbP,EAAIlN,EAAG2M,oBAAoBrH,EAAStF,EAAG0N,mBAE7C,IAAK,IAAIzf,EAAI,EAAGA,EAAIif,EAAGjf,GAAK,EAAG,CAC7B,IAAImf,KAAEA,EAAItX,KAAEA,EAAIvG,KAAEA,GAASyQ,EAAG2N,gBAAgBrI,EAASrX,GACvDsB,EAAOA,EAAKqe,QAAQ,MAAO,IAC3B,MAAM3C,EAAMjL,EAAG6N,kBAAkBvI,EAAS/V,GAE1Cke,EAAW9gB,KAAK,CAAEygB,KAAAA,EAAMtX,KAAAA,EAAMvG,KAAAA,EAAM0b,IAAAA,IAGtC,OAAOwC,EAvHcK,CAAe9N,EAAIsF,GAEtCnN,EAAMxJ,IAAI0J,EAAM,CAAEiN,QAAAA,EAAS2H,SAAAA,EAAUQ,WAAAA,IAGvC,OAAOtV,EAAM3G,IAAI6G,GAYnB,SAAS0V,GAAIC,EAAKngB,EAAM,GAEtB,IADAmgB,EAAMC,OAAOD,GACNA,EAAIhgB,OAASH,GAAKmgB,EAAM,IAAIA,EACnC,OAAOA,EAGT,SAASE,GAAOC,EAAKlgB,GACnB,IAAIM,EAAS,GACb,KAAON,KAAKM,GAAU4f,EACtB,OAAO5f,EAGT,SAASge,GAAcvM,EAAIlK,EAAMwI,EAAQ8P,GACvC,MAAMC,EAASrO,EAAGsO,aAAaxY,GAI/B,GAHAkK,EAAGuO,aAAaF,EAAQ/P,GACxB0B,EAAGwO,cAAcH,GAEbrO,EAAGyO,mBAAmBJ,EAAQrO,EAAG0O,gBACnC,OAAOL,EAGT,MAAMvB,EAAM9M,EAAG2O,iBAAiBN,GAC1BO,EAAQ,2BAA2BC,KAAK/B,GAE9C,GAAI8B,EAAO,CACT,MAAMxb,GAAKwb,EAAM,GACXpZ,GAAKoZ,EAAM,GAAK,EAEtB/B,QAAQC,IAAI,KAAO8B,EAAM,GAAI,iCAE7B,MAAME,EAAQxQ,EAAOyQ,MAAM,MAC3B,IAAK,IAAI9gB,EAAI,EAAGA,EAAI6gB,EAAM9gB,OAAQC,GAAK,EAAG,CACxC,GAAIH,KAAKkhB,IAAIxZ,EAAIvH,GAAK,EAAG,SAEzB,MAAMghB,EAAOH,EAAM7gB,GAAG2f,QAAQ,SAAUsB,GAAQhB,GAAO,IAAmB,EAAdgB,EAAKlhB,SAC3DmhB,EAAS,OAAON,KAAKI,GAErBd,EAAM,GAAGJ,GAAI9f,OAAOghB,IAEtBhhB,IAAMuH,GACRqX,QAAQC,IAAI,KAAOqB,EAAK,iCACxBtB,QAAQC,IAAI,MAAQqC,GAAUA,EAAO,IAAM,IAAMjB,GAAO,IAAK9a,EAAI,GAAK,IAAK,eAE3EyZ,QAAQC,IAAIqB,GAIhB,MAAM,IAAInd,MAAM,qBAAqBod,YAGvC,MAAM,IAAIpd,MAAM,qBAAqBod,cAAkBtB,KC3E1C,MAAMsC,GACnBzZ,YAAYuM,EAAOiK,EAAMC,EAAMjK,GAC7BvM,KAAKsM,MAAQA,EAEb,MAAMlC,EAAKkC,EAAMlC,GACjBpK,KAAKoK,GAAKA,EAEV,MAAMsF,QAAEA,EAAO2H,SAAEA,EAAQQ,WAAEA,GAAevB,GACxClM,EACAkC,EAAMC,QAAUA,EAAhBD,oSAA2DiK,EAC3DjK,EAAMC,QAAUA,EAAhBD,uWAA2DkK,GAG7DxW,KAAK0P,QAAUA,EACf1P,KAAKqX,SAAWA,EAChBrX,KAAK6X,WAAaA,EAElB7X,KAAK6P,kBAAoB,GACzB7P,KAAKqX,SAASthB,QAAQ0jB,KAhC1B,SAAkBlZ,EAAKmZ,EAAM5gB,GAC3B,MAAM6gB,EAAQD,EAAK1B,QAAQ,MAAO,IAAImB,MAAM,cAE5C,KAAOQ,EAAMvhB,OAAS,GAAG,CACvB,MAAMwhB,EAAOD,EAAME,QACbC,EAAOH,EAAM,GAEdpZ,EAAIqZ,KAAOrZ,EAAIqZ,GAAQ,QAAQG,KAAKD,GAAQ,GAAK,IACtDvZ,EAAMA,EAAIqZ,GAGZrZ,EAAIoZ,EAAM,IAAM7gB,EAsBZkhB,CAASha,KAAK6P,kBAAmB4J,EAAQ9f,KAAMyQ,EAAGsN,mBAAmB1X,KAAK0P,QAAS+J,EAAQ9f,SAG7FqG,KAAKia,oBAAsB,GAC3Bja,KAAK6X,WAAW9hB,QAAQyE,IACtBwF,KAAKia,oBAAoBzf,EAAUb,MAAQyQ,EAAG6N,kBAAkBjY,KAAK0P,QAASlV,EAAUb,QAG1FqG,KAAKka,WAAa,GAClBla,KAAKma,OAAS,GAGhBpa,aAAama,GACX,IAAIE,EAAgB,EAEpBpa,KAAKqX,SAASthB,QAAQ,EAAG4D,KAAAA,EAAMuG,KAAAA,EAAMmV,IAAAA,EAAKsC,OAAAA,EAAQ0C,UAAAA,MAChD,GAAI1gB,KAAQugB,EAAY,CACtB,IAAIngB,EAAOmgB,EAAWvgB,GAEtB,GAAII,IAASiG,KAAKka,WAAWvgB,GAAO,OAEpC,GAAa,QAATuG,EAOF,YALAF,KAAKma,OAAOxgB,GAAQ,CAClByc,QAASrc,EAAKugB,YAAYta,KAAKsM,OAAOiO,EACtCpa,MAAOia,MAMS,iBAATrgB,GAA8B,OAATmG,IAI9BnG,EAAO8H,GAAc9H,IAGvBiG,KAAKma,OAAOxgB,GAAQI,KAIxBiG,KAAKka,WAAaA,EAGpBna,eAAeqK,EAAIoQ,GAGjBxa,KAAKqX,SAASthB,QAAQ0jB,IAChBA,EAAQ9f,QAAQqG,KAAKma,QACvBV,EAAQ9B,OAAOvN,EAAIqP,EAAQpE,IAAKrV,KAAKma,OAAOV,EAAQ9f,SAK1DoG,gpKClFWuQ,GAAY,EAAG,EAAG,gBAClB4D,GAAY,EAAG,EAAG,aAClBC,EAAQ,eAERjF,WAEAqH,EAAOkE,YACPjE,EAAOkE,gBACPrD,mBACAjI,kBACAC,kBACA3D,GAAc,WAEnBY,EAAQ/K,KACR6J,EZbCzP,EAAW0F,SYcV+L,GAAQ5L,yBAEJ2L,WACNwN,EAAOxN,KAeP3B,SASFC,GAAW,2BAUflQ,OACMiQ,EAAK2D,UAAU3D,EAAK2D,SAASyL,0YAjChCnG,EAA+B,iBAAVN,GAAsBA,EAAOA,EAAOA,GAASA,0BAClEE,EAAaW,GAAeX,GAAcC,QAAkBJ,4BAC5DvH,EAASsI,GAAkCtI,GAAUQ,KAAekH,EAAY/D,EAAUmE,4BAC1FzF,EAAQsD,GAActD,GAAS7B,KAAe4H,EAAMpI,yBAEpDJ,EAAU5W,OAAO8K,KAAK4W,GACtB/Y,OAAO/I,GAAoB,MAAf8hB,EAAS9hB,IACrB8I,IAAI9I,kBAAoBA,YACxBiX,KAAK,6BACLqO,MAAwBrB,GAASlN,EAAOiK,EAAMC,EAAMjK,wBACpDsO,EAAkBC,aAAazD,4BAC/B0D,EAAoB7L,EAASoL,YAAYhO,EAAOuO,EAAkBnL,8BAGlElE,EAAKwD,MAAQA,uBACbxD,EAAKyD,yBAA2B+L,GAAYL,EAAM3L,GTkKhD,SAAmB/M,EAAK9L,GAE7B,GAAI8L,IAAQ9L,EAAG,CACb,IAAI6M,EAAM7M,EAAE,GACR8M,EAAM9M,EAAE,GACR+M,EAAM/M,EAAE,GACRkN,EAAMlN,EAAE,GACRmN,EAAMnN,EAAE,GACRuN,EAAMvN,EAAE,IACZ8L,EAAI,GAAK9L,EAAE,GACX8L,EAAI,GAAK9L,EAAE,GACX8L,EAAI,GAAK9L,EAAE,IACX8L,EAAI,GAAKe,EACTf,EAAI,GAAK9L,EAAE,GACX8L,EAAI,GAAK9L,EAAE,IACX8L,EAAI,GAAKgB,EACThB,EAAI,GAAKoB,EACTpB,EAAI,IAAM9L,EAAE,IACZ8L,EAAI,IAAMiB,EACVjB,EAAI,IAAMqB,EACVrB,EAAI,IAAMyB,OAEVzB,EAAI,GAAK9L,EAAE,GACX8L,EAAI,GAAK9L,EAAE,GACX8L,EAAI,GAAK9L,EAAE,GACX8L,EAAI,GAAK9L,EAAE,IACX8L,EAAI,GAAK9L,EAAE,GACX8L,EAAI,GAAK9L,EAAE,GACX8L,EAAI,GAAK9L,EAAE,GACX8L,EAAI,GAAK9L,EAAE,IACX8L,EAAI,GAAK9L,EAAE,GACX8L,EAAI,GAAK9L,EAAE,GACX8L,EAAI,IAAM9L,EAAE,IACZ8L,EAAI,IAAM9L,EAAE,IACZ8L,EAAI,IAAM9L,EAAE,GACZ8L,EAAI,IAAM9L,EAAE,GACZ8L,EAAI,IAAM9L,EAAE,IACZ8L,EAAI,IAAM9L,EAAE,IAGd,OAAO8L,ES1MsDgZ,CAAeN,EAAMA,0BAC/EnP,EAAK2D,SAAW0L,wBAChBrP,EAAK0D,SAAW6L,oBAChBvP,EAAK4D,UAAYA,oBACjB5D,EAAK6D,YAAcA,qBACnB7D,EAAKE,YAAcA,qBAIpBN,EAAMG,SAASC,EAAMC,GACrBA,GAAW,sBAIFC,IAAgBN,EAAME,yBAA0B,uBACnBgB,EAAMpL,+OCxDnC+L,eACAqD,GAAY,EAAG,EAAG,uBAErBtD,GAAezL,UACf6L,GAAQ5L,4BAEZwN,EAAQ7B,WACNqD,MAAqBzO,aAAaiN,EAAMuF,OAAQ,GAAQ,GASxDc,MAAUtT,aAAa,4HAJ1BoD,EAAImL,EAAS,sBACblL,EAAIkL,EAAS,sBACbjL,EAAIiL,EAAS,yBAGb+E,EAAI,GAAKlQ,SAAGkQ,EAAI,GAAKjQ,SAAGiQ,EAAI,GAAKhQ,0BAEjC2J,EAAQ2F,GAAe3F,EAAO+F,EAAMM,mBAC5BrI,EAAWC,GAAIlU,IAAIyX,0HCrBnB1O,GAAS,EAAG,EAAG,iBACf0M,EAAY,YAEjBlC,EAAQ/K,KAER4O,YAIN7D,EAAMS,kBAAkBoD,mHAHrBA,EAAMrO,MAAQD,GAAcC,wBAC5BqO,EAAM3B,UAAYA,mBAIVlC,EAAMpL,6ICTNkP,MAAgBrO,eAAe,GAAI,GAAI,cACvCD,MAAYC,cAAc,EAAG,EAAG,kBAChCyM,EAAY,WAEjBlC,EAAQ/K,UACN6L,GAAQ5L,8BAIV2O,kBAKN7D,EAAMO,sBAAsBsD,wJAPzB+K,EAAaC,GAAmBD,GAAcnH,KAAe3D,EAAW2E,uBAGxE5E,EAAMC,UAAYgL,GAAejL,EAAMC,WAAa2D,KAAemH,wBACnE/K,EAAMrO,MAAQD,GAAcC,wBAC5BqO,EAAM3B,UAAYA,oBAIVlC,EAAMpL,4JChBNoP,MAAevO,eAAe,GAAI,GAAI,cACtCD,MAAYC,cAAc,EAAG,EAAG,kBAChCyM,EAAY,WAEjBlC,EAAQ/K,UACN6L,GAAQ5L,4BAEZ2O,GACFG,SAAUyD,KACVjS,MAAO,KACP0M,UAAW,aAOblC,EAAMQ,gBAAgBqD,sJAJnBA,EAAMG,SAAW6K,GAAmBhL,EAAMG,SAAUA,EAAUyE,wBAC9D5E,EAAMrO,MAAQD,GAAcC,wBAC5BqO,EAAM3B,UAAYA,oBAIVlC,EAAMpL,wHCmFnB,SAASma,GAAMjD,EAAK3J,EAAKtW,GACrB,OAAOigB,EAAM3J,EAAMA,EAAM2J,EAAMjgB,EAAMA,EAAMigB,EC7GxC,SAASkD,GAAS7lB,GACvB,IACIyE,EADAqhB,GAAY,EAGhB,SAASC,IACP/lB,EAAGyE,GACHqhB,GAAY,EAGd,OAAO,SAASE,GACTF,IACH5Q,sBAAsB6Q,GACtBD,GAAY,GAGdrhB,EAAQuhB,ySCmLDC,GAAOvlB,EAAGC,UACV8B,KAAKmK,KAAKlM,EAAIA,EAAIC,EAAIA,4BA3LzBkW,EAAQ/K,kBAEH+O,MAAevO,cAAc,EAAG,EAAG,eACnC9I,MAAa8I,cAAc,EAAG,EAAG,oBAGjC4Z,EAAc,kBACdC,EAAcC,EAAAA,oBAIdC,EAAgB,oBAChBC,EAAgB7jB,KAAKkb,eAYvB4I,EAAO7W,EAAGC,SAEX6W,EAAK3L,EAAS,GAAKrX,EAAO,GAC1BijB,EAAK5L,EAAS,GAAKrX,EAAO,GAC1BkjB,EAAK7L,EAAS,GAAKrX,EAAO,GAE1BmjB,EAASlkB,KAAKmK,KAAK4Z,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,OAE9CE,EAAQnkB,KAAKokB,MAAML,EAAIE,GAC3BE,GAASlX,MAELoX,EAAMrkB,KAAK8a,KAAKwJ,GAAcN,EAAKE,GAAS,EAAG,IACnDG,EAAMC,GAAcD,EAAMnX,EAdZ,KAcwBlN,KAAKkb,GAd7B,MAedmJ,EAAMC,GAAcD,EAAKT,EAAeC,SAElCU,EAAiBvkB,KAAK+a,IAAIsJ,GAAOH,EAEjCM,EAAKD,EAAiBvkB,KAAK+a,IAAIoJ,GAC/BM,EAAKzkB,KAAKob,IAAIiJ,GAAOH,EACrBQ,EAAKH,EAAiBvkB,KAAKob,IAAI+I,OAErC/L,EAAS,GAAKrX,EAAO,GAAKyjB,SAC1BpM,EAAS,GAAKrX,EAAO,GAAK0jB,SAC1BrM,EAAS,GAAKrX,EAAO,GAAK2jB,cAGnBC,EAAIC,EAAIC,SAETd,EAAK3L,EAAS,GAAKrX,EAAO,GAE1BkjB,GADK7L,EAAS,GAAKrX,EAAO,GACrBqX,EAAS,GAAKrX,EAAO,WAIxBmX,EAAYpO,IAAWia,EAAIE,IAC3BhX,GAAKiL,EAAU,GAAK2M,EACpB1X,GAAK+K,EAAU,GAAK2M,MAE1BzM,EAAS,IAAMnL,SACfmL,EAAS,IAAMjL,SAEfpM,EAAO,IAAMkM,SACblM,EAAO,IAAMoM,YAKP2X,EAAUhb,KAAYma,EAAIF,IAC1B9W,EAAI6X,EAAQ,GAAKF,EACjBzX,EAAI2X,EAAQ,GAAKF,MAEvBxM,EAAS,IAAMnL,SACfmL,EAAS,IAAMjL,SAEfpM,EAAO,IAAMkM,SACblM,EAAO,IAAMoM,eAIR4X,EAAKC,OACRjB,EAAK3L,EAAS,GAAKrX,EAAO,GAC1BijB,EAAK5L,EAAS,GAAKrX,EAAO,GAC1BkjB,EAAK7L,EAAS,GAAKrX,EAAO,SAExBmJ,EAAMlK,KAAKmK,KAAK4Z,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,GAQ/CF,GANAiB,EAASV,GACPU,EACC9a,EAAMwZ,EACPD,EAAevZ,EAAMuZ,EAAeE,EAAAA,GAItCK,GAAMgB,EACNf,GAAMe,MAEN5M,EAAS,GAAKrX,EAAO,GAAKgjB,SAC1B3L,EAAS,GAAKrX,EAAO,GAAKijB,SAC1B5L,EAAS,GAAKrX,EAAO,GAAKkjB,cAGnBgB,EAAiBjjB,OACpBkjB,EAASljB,EAAMmjB,QACfC,EAASpjB,EAAMqjB,cAEbC,EAAmBlC,GAASphB,UAC1BiL,EAAIjL,EAAMmjB,QACVjY,EAAIlL,EAAMqjB,QAEVT,EAAK3X,EAAIiY,EACTL,EAAK3X,EAAIkY,EAEXpjB,EAAMujB,UAA4B,IAAhBvjB,EAAMwjB,MAC1Bb,EAAS,IAALC,EAAgB,IAALC,GAEff,EAAY,KAALc,EAAiB,KAALC,GAGrBK,EAASjY,EACTmY,EAASlY,IAQXrK,OAAOV,iBAAiB,YAAamjB,GACrCziB,OAAOV,iBAAiB,oBANfsjB,EAAezjB,GACtBa,OAAOT,oBAAoB,YAAakjB,GACxCziB,OAAOT,oBAAoB,UAAWqjB,YAOpCC,EAAkBtC,GAASphB,IAC/B+iB,EAAK/kB,KAAK2lB,IAAI,MAAO3jB,EAAM4jB,yBAGpBC,EAAkB7jB,GACzBA,EAAM8jB,iBACNJ,EAAgB1jB,YA2GT+jB,EAAkB/jB,GACI,IAAzBA,EAAMgkB,QAAQ9lB,iBAzGE8B,GACpBA,EAAM8jB,uBAEAG,EAAQjkB,EAAMgkB,QAAQ,GACtBE,EAASD,EAAME,eAEjBjB,EAASe,EAAMd,QACfC,EAASa,EAAMZ,cAEbe,EAAmBhD,GAASphB,OAC5BA,EAAMgkB,QAAQ9lB,OAAS,eAErB+lB,EAAQjkB,EAAMgkB,QAAQ,MACxBC,EAAME,aAAeD,SAKzBpC,EAAY,MAHAmC,EAAMd,QAAUD,GAGJ,MAFZe,EAAMZ,QAAUD,IAI5BF,EAASe,EAAMd,QACfC,EAASa,EAAMZ,UAiBjBxiB,OAAOV,iBAAiB,YAAaikB,GACrCvjB,OAAOV,iBAAiB,qBAffkkB,EAAgBrkB,OACnB7B,EAAI6B,EAAMskB,eAAepmB,YAEtBC,SACS6B,EAAMskB,eAAenmB,GACzBgmB,aAAeD,SACvBrjB,OAAOT,oBAAoB,YAAagkB,QACxCvjB,OAAOT,oBAAoB,WAAYikB,OA2E3CE,CAAavkB,GAGc,IAAzBA,EAAMgkB,QAAQ9lB,iBA/DI8B,GACtBA,EAAM8jB,uBAEAU,EAAUxkB,EAAMgkB,QAAQ,GACxBS,EAAUzkB,EAAMgkB,QAAQ,GAExBU,EAAWF,EAAQL,WACnBQ,EAAWF,EAAQN,eAErBS,GAAWJ,EAAQrB,QAAUsB,EAAQtB,SAAW,EAChD0B,GAAWL,EAAQnB,QAAUoB,EAAQpB,SAAW,EAChDyB,EAAStD,GAAOiD,EAAQtB,QAAUqB,EAAQrB,QAASsB,EAAQpB,QAAUmB,EAAQnB,eAE3Ee,EAAmBhD,GAASphB,OACH,IAAzBA,EAAMgkB,QAAQ9lB,mBAChB6mB,MAAS/kB,EAAMgkB,QAAQ9lB,yBAInBsmB,EAAUxkB,EAAMgkB,QAAQ,GACxBS,EAAUzkB,EAAMgkB,QAAQ,MAE1BQ,EAAQL,aAAeO,GAAYF,EAAQL,aAAeQ,YAC1DF,EAAQN,aAAeO,GAAYD,EAAQN,aAAeQ,eAExDxL,GAAMqL,EAAQrB,QAAUsB,EAAQtB,SAAW,EAC3C9J,GAAMmL,EAAQnB,QAAUoB,EAAQpB,SAAW,EAC3Cvf,EAAI0d,GAAOiD,EAAQtB,QAAUqB,EAAQrB,QAASsB,EAAQpB,QAAUmB,EAAQnB,SAK9EV,EAAS,KAHExJ,EAAKyL,GAGI,KAFTvL,EAAKwL,IAGhB9B,EAAKjf,EAAIghB,GAETF,EAAUzL,EACV0L,EAAUxL,EACVyL,EAAShhB,IAiBXjD,OAAOV,iBAAiB,YAAaikB,GACrCvjB,OAAOV,iBAAiB,qBAffkkB,EAAgBrkB,OACnB7B,EAAI6B,EAAMskB,eAAepmB,YAEtBC,YACC8lB,EAAQjkB,EAAMskB,eAAenmB,MAC/B8lB,EAAME,aAAeO,GAAYT,EAAME,aAAeQ,SACxD9jB,OAAOT,oBAAoB,YAAagkB,QACxCvjB,OAAOT,oBAAoB,WAAYikB,OAiB3CW,CAAehlB,GAInBoS,EAAMpC,OAAO7P,iBAAiB,YAAa8iB,GAC3C7Q,EAAMpC,OAAO7P,iBAAiB,aAAc0jB,GAC5CzR,EAAMpC,OAAO7P,iBAAiB,aAAc4jB,GAE5C1iB,OACE+Q,EAAMpC,OAAO5P,oBAAoB,YAAa6iB,GAC9C7Q,EAAMpC,OAAO5P,oBAAoB,aAAcyjB,GAC/CzR,EAAMpC,OAAO5P,oBAAoB,aAAc2jB,glBC5QtC3N,GAAY,EAAG,EAAG,cAClB2D,EAAS,YACTvN,GAAM,EAAG,EAAG,WACZyY,EAAM,YACNC,EAAO,UACPC,EAAM,wBAET5S,EAAUG,cAAEA,EAAahC,MAAEA,EAAKC,OAAEA,EAAMmC,WAAEA,GAAezL,uDACzD6L,GAAQ5L,+BAEVmL,EAASQ,KACTqD,MAAqBzO,aAAa4K,EAAO4H,OAAQ,GAAQ,OAG3DzI,GACFa,OAAAA,EACA6D,eAAAA,EACA/F,KAAM0C,KACNzC,WAAYyC,MAGVlU,EAAS0H,GAAS,iBA0BtB8L,EAAWX,iNAxBc,iBAAXmI,QACZhb,EAAS+T,EAAWiH,KAEpBhb,EAAOF,IAAIkb,0BAGVnI,EAAOa,QACRgI,GAAe7I,EAAOa,OAAQoI,EAAMzE,GACpCoE,GAAWG,GAAc/I,EAAOa,OAAQ6D,EAAgBkE,EAAShO,GACjEoF,EAAOa,iCAGNb,EAAOrB,KAAOuQ,GAAYlP,EAAOrB,KAAMqB,EAAOa,kCAE9Cb,EAAOpB,WjBizCL,SAAqBzI,EAAKqd,EAAMC,EAAQH,EAAMC,GACnD,IACIG,EADAC,EAAI,EAAMvnB,KAAKwnB,IAAIJ,EAAO,GA0B9B,OAxBArd,EAAI,GAAKwd,EAAIF,EACbtd,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAKwd,EACTxd,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,GAAK,EACTA,EAAI,KAAO,EACXA,EAAI,IAAM,EACVA,EAAI,IAAM,EACVA,EAAI,IAAM,EAEC,MAAPod,GAAeA,IAAQxD,EAAAA,GACzB2D,EAAK,GAAKJ,EAAOC,GACjBpd,EAAI,KAAOod,EAAMD,GAAQI,EACzBvd,EAAI,IAAM,EAAIod,EAAMD,EAAOI,IAE3Bvd,EAAI,KAAO,EACXA,EAAI,KAAO,EAAImd,GAGVnd,EiB50CgB0d,CACrB7T,EAAOpB,WACPyU,EAAM,IAAMjnB,KAAKkb,GACjBzF,EAASC,EACTwR,EACAC,uBAGCzS,EAAcd,uIClDnB,MAAM8T,GACJ7f,YAAYuM,EAAOoD,EAASmI,EAAY1X,EAAOkR,EAAWI,GACxDzR,KAAKsM,MAAQA,EACb,MAAMlC,EAAKkC,EAAMlC,GAEjBpK,KAAK6X,WAAaA,EAClB7X,KAAKG,MAAQA,EACbH,KAAKqR,UAAYA,EACjBrR,KAAKyR,MAAQA,EAEbzR,KAAK6f,UAAY,GACjB7f,KAAKkR,QAAU,GAEf,IAAK,MAAMzV,KAAOoc,EAAY,CAC5B,MAAMrd,EAAYqd,EAAWpc,GAE7BuE,KAAK6f,UAAUpkB,GAAO2O,EAAG6N,kBAAkBvI,EAASjU,GAEpD,MAAM8Y,EAASnK,EAAG0V,eAClB9f,KAAKkR,QAAQzV,GAAO8Y,EAEpBnK,EAAG4G,WAAW5G,EAAG2V,aAAcxL,GAC/BnK,EAAG4V,WAAW5V,EAAG2V,aAAcvlB,EAAUT,KAAMS,EAAUylB,QAAU7V,EAAG8V,aAAe9V,EAAG+V,aAG1F,GAAIhgB,EAAO,CACT,MAAMoU,EAASnK,EAAG0V,eAClB9f,KAAKkR,QAAQC,QAAUoD,EACvBnK,EAAG4G,WAAW5G,EAAG6G,qBAAsBsD,GACvCnK,EAAG4V,WAAW5V,EAAG6G,qBAAsB9Q,EAAOiK,EAAG+V,cAIrDpgB,eAAeqK,GACb,IAAK,MAAM3O,KAAOuE,KAAK6X,WAAY,CACjC,MAAMrd,EAAYwF,KAAK6X,WAAWpc,GAE5B4Z,EAAMrV,KAAK6f,UAAUpkB,GAC3B,GAAI4Z,EAAM,EAAG,SAEb,MAAMmC,KACJA,EAAO,EAACtX,KACRA,EAAOkK,EAAGgW,MAAKC,WACfA,GAAa,EAAKC,OAClBA,EAAS,EAACC,OACVA,EAAS,GACP/lB,EAGE+Z,EAASvU,KAAKkR,QAAQzV,GAE5B2O,EAAG4G,WAAW5G,EAAG2V,aAAcxL,GAG/BnK,EAAGoW,wBAAwBnL,GAE3BjL,EAAGqW,oBACDpL,EACAmC,EACAtX,EACAmgB,EACAC,EACAC,IAKNxgB,OAAOxK,EAAGwE,EAAM0X,GACd,MAAMnF,EAAQtM,KAAKsM,OACblC,GAAEA,GAAOkC,EAET9R,EAAYwF,KAAK6X,WAAWtiB,GAC5Bgf,EAASvU,KAAKkR,QAAQ3b,GAO5B,GALA6U,EAAG4G,WAAW5G,EAAG2V,aAAcxL,GAC/BnK,EAAG4V,WAAW5V,EAAG2V,aAAcvlB,EAAUT,KAAOA,EAAMS,EAAUylB,QAAU7V,EAAG8V,aAAe9V,EAAG+V,aAE/FngB,KAAKyR,MAAQA,EAETA,IAAUoK,EAAAA,EACZ,MAAM,IAAIzgB,MAAM,+EAGlBkR,EAAMpL,cAIK,MAAMwf,GACnB3gB,YAAY8X,EAAa,GAAI8I,EAAO,IAClC3gB,KAAK6X,WAAaA,EAElB,MAAM1X,MAAEA,EAAKkR,UAAEA,EAAY,aAAgBsP,EAC3C3gB,KAAKG,MAAQA,EACbH,KAAKqR,UAAYA,EAAUuP,cAC3B5gB,KAAKyR,MAAQoP,GAAUhJ,GAEvB7X,KAAK8gB,UAAY,IAAI9hB,IAGvBe,YAAYuM,EAAOoD,GAYjB,OAXK1P,KAAK8gB,UAAUhkB,IAAI4S,IACtB1P,KAAK8gB,UAAU/nB,IAAI2W,EAAS,IAAIkQ,GAC9BtT,EACAoD,EACA1P,KAAK6X,WACL7X,KAAKG,MACLH,KAAKqR,UACLrR,KAAKyR,QAIFzR,KAAK8gB,UAAUllB,IAAI8T,GAG5B3P,OAAOxK,EAAGwE,GACRiG,KAAK6X,WAAWtiB,GAAGwE,KAAOA,EAC1BiG,KAAKyR,MAAQoP,GAAU7gB,KAAK6X,YAE5B7X,KAAK8gB,UAAU/qB,QAAQ2I,IACrBA,EAAS9B,OAAOrH,EAAGwE,EAAMiG,KAAKyR,UAKpC,SAASoP,GAAUhJ,GACjB,IAAIpJ,EAAMoN,EAAAA,EAEV,IAAK,MAAMtmB,KAAKsiB,EAAY,CAC1B,MAAMpG,EAAQoG,EAAWtiB,GAAGwE,KAAK3B,OAASyf,EAAWtiB,GAAGiiB,KACpD/F,EAAQhD,IAAKA,EAAMgD,GAGzB,OAAOhD,SCjIMnM,GAAQ,IACd,IAAIoe,GAAS,CAClBpY,SAAU,CACRvO,KAAM,IAAIgI,aAAa,CACpB,EAAI,EAAG,GACP,EAAI,EAAG,EACP,GAAI,EAAG,GACP,GAAI,EAAG,IAEVyV,KAAM,GAGRuJ,OAAQ,CACNhnB,KAAM,IAAIgI,aAAa,CACrB,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,IAERyV,KAAM,GAGRwJ,GAAI,CACFjnB,KAAM,IAAIgI,aAAa,CACrB,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,IAELyV,KAAM,IAEP,CACDrX,MAAO,IAAI8gB,YAAY,CACrB,EAAG,EAAG,EACN,EAAG,EAAG,OClCZ,MAAMzoB,GAAI,gBACJ+M,GAAI,kBAEJ+C,GAAW,IAAIvG,aAAa,EAC/BwD,IAAI/M,GAAI,GACR+M,IAAI/M,GAAI,GACR+M,IAAI/M,GAAI,GACR+M,IAAI/M,GAAI,EACR,GAAI+M,IAAI/M,GACR,GAAI+M,IAAI/M,GACR,GAAI+M,IAAI/M,GACR,GAAI+M,IAAI/M,IACRA,GAAI,GAAI+M,IACR/M,GAAI,GAAI+M,IACR/M,GAAI,GAAI+M,IACR/M,GAAI,GAAI+M,KAGLpF,GAAQ,IAAI+gB,YAAY,CAC5B,EAAG,GAAI,EACP,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,GACN,EAAG,GAAI,GACP,EAAG,EAAG,EACN,EAAG,GAAI,EACP,GAAI,GAAI,EACR,GAAI,EAAG,EACP,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,EACN,EAAG,EAAG,GACN,EAAG,EAAG,GACN,EAAG,EAAG,EACN,EAAG,EAAG,ICtCF9N,ID0CJ,IAAIsN,GAAS,CACXpY,SAAU,CAAEvO,KAAMuO,GAAUkP,KAAM,GAClCuJ,OAAQ,CAAEhnB,KAAMuO,GAAUkP,KAAM,IAC/B,CAAErX,MAAAA,KC7CIjI,KAAKkb,IACV+N,GAAW,EAAL/N,UAgFG9Q,GAAQ,EAAG8e,MAAAA,EAAQ,EAAGC,MAAAA,EAAQ,EAAGC,QAAAA,EAAU,UAAa,KAClD,WAAZA,EA/ET,SAAgCF,EAAOC,GACrC,MAAME,GAAgBH,EAAQ,IAAMC,EAAQ,GAEtCG,EADqB,GAAKH,EAAQ,GACDD,EAEjC9Y,EAAW,IAAIvG,aAA4B,EAAfwf,GAC5BP,EAAK,IAAIjf,aAA4B,EAAfwf,GACtBphB,EAAQ,IAAI8gB,YAAwB,EAAZO,GAE9B,IAAIC,EAAiB,EACjBC,EAAW,EAEf,IAAK,IAAIrpB,EAAI,EAAGA,GAAK+oB,EAAO/oB,GAAK,EAAG,CAClC,MAAMspB,EAAItpB,EAAI+oB,EAEd,IAAK,IAAIQ,EAAI,EAAGA,GAAKP,EAAOO,GAAK,EAAG,CAClC,MAAM1c,EAAI0c,EAAIP,EAERlc,GAAKjN,KAAKob,IAAIqO,EAAIR,IAAOjpB,KAAK+a,IAAI/N,EAAIkO,IACtChO,EAAIlN,KAAKob,IAAIpO,EAAIkO,IACjB/N,EAAInN,KAAK+a,IAAI0O,EAAIR,IAAOjpB,KAAK+a,IAAI/N,EAAIkO,IAE3C9K,EAASmZ,KAAoBtc,EAC7BmD,EAASmZ,KAAoBrc,EAC7BkD,EAASmZ,KAAoBpc,EAE7B2b,EAAGU,KAAcC,EACjBX,EAAGU,KAAcxc,GAIrB,IAAI2c,EAAa,EAEjB,IAAK,IAAIxpB,EAAI,EAAGA,EAAI+oB,EAAO/oB,GAAK,EAAG,CACjC,MAAMkoB,EAASloB,GAAKgpB,EAAQ,GAG5BlhB,EAAM0hB,KAAgBtB,EAAS,EAC/BpgB,EAAM0hB,KAAgBtB,EAAS,EAC/BpgB,EAAM0hB,KAAgBtB,EAASc,EAAQ,EAEvC,IAAK,IAAIO,EAAI,EAAGA,EAAIP,EAAQ,EAAGO,GAAK,EAClCzhB,EAAM0hB,KAAgBtB,EAASqB,EAC/BzhB,EAAM0hB,KAAgBtB,EAASqB,EAAI,EACnCzhB,EAAM0hB,KAAgBtB,EAASqB,EAAIP,EAAQ,EAE3ClhB,EAAM0hB,KAAgBtB,EAASqB,EAAIP,EAAQ,EAC3ClhB,EAAM0hB,KAAgBtB,EAASqB,EAAI,EACnCzhB,EAAM0hB,KAAgBtB,EAASqB,EAAIP,EAAQ,EAG7ClhB,EAAM0hB,KAAgBtB,EAASc,EAAQ,EACvClhB,EAAM0hB,KAAgBtB,EAASc,EAC/BlhB,EAAM0hB,KAAgBtB,EAAiB,EAARc,EAGjC,OAAO,IAAIX,GAAS,CAClBpY,SAAU,CACRvO,KAAMuO,EACNkP,KAAM,GAERuJ,OAAQ,CACNhnB,KAAMuO,EACNkP,KAAM,GAERwJ,GAAI,CACFjnB,KAAMinB,EACNxJ,KAAM,IAEP,CACDrX,MAAAA,IAUE2hB,CAAuBV,EAAOC,GANpC,SAA8BD,EAAOC,GACnC,MAAM,IAAIjmB,MAAM,gCAMZ2mB,ICrF8B,oBAATC,MAAwBC,IAAIC,gBAAgB,IAAIF,KACzE,CAAC,mEACD,CAAE9hB,KAAM,6BACe,oBAAXnF,QAA0BA,OAAOonB,uNC8EY,QAAW,mPAkBtDC,IAAYhB,MAAO,GAAIC,MAAO,eAC7BnqB,KAAEA,KAAEA,YACRA,eACK4K,MAAA5K,KAAOmrB,MAAO,uGAFfnrB,KAAEA,KAAEA,qBACRA,wBACK4K,MAAA5K,KAAOmrB,MAAO,2JAQhBD,IAAYhB,MAAO,GAAIC,MAAO,eAC7B,EAAE,GAAI,SACV,aACKvf,MAAO,SAAUwgB,SAAU,wCAI5B,EAAE,EAAE,SACR,mBACI,wTAzCmB,EAAG,EAAG,qCAEPpqB,KAAKkb,GAAK,yHAIf,mCACM,GAAG,GAAG,aAAe,gCAI3CmP,eACC,GAAG,IAAK,cACP,GAAG,EAAE,SACV,aACKzgB,MAAO,mBAId5K,0BAALkB,wGAWmBlB,KAAMiO,EAAEjO,KAAMkO,EAAElO,KAAMmO,udAXpCnO,aAALkB,+HAAAA,6DAWmBlB,KAAMiO,EAAEjO,KAAMkO,EAAElO,KAAMmO,8KAXzCjN,mT5BuFJ,SAAsBoqB,EAAYhkB,GAC9B,IAAK,IAAInG,EAAI,EAAGA,EAAImqB,EAAWpqB,OAAQC,GAAK,EACpCmqB,EAAWnqB,IACXmqB,EAAWnqB,GAAG2F,EAAEQ,yU4BzLtBikB,GAAQhU,EAAKtW,IACRsW,GAAOtW,EAAMsW,GAAOvW,KAAKwqB,SAO9BvS,KACAwS,aAEItqB,EAAE,EAAGA,EAAE,GAAIA,IAEjBsqB,EAAM5rB,MACJoO,EAAGsd,GAAM,EAAG,GACZrd,EAAGqd,EAAK,GAAK,GACbpd,EAAGod,GAAM,EAAG,GACZ3F,GAAI2F,GAAM,EAAG,GACb1F,GAAI0F,GAAM,EAAG,GACbG,GAAIH,GAAM,EAAG,GACb3gB,MAfK5J,KAAK2qB,MAAsB,SAAhB3qB,KAAKwqB,UAgBrBnc,GAAIkc,EAAK,GAAK,aAGlBpnB,WACMynB,EAEAC,OACFD,EAAQnY,sBAAsBoY,OAE9B5S,EAAMhL,EAAI,EAAIjN,KAAK+a,IAAiB,KAAb+P,KAAKC,cAC5B9S,EAAM/K,EAAI,IAAM,EAAIlN,KAAK+a,IAAiB,KAAb+P,KAAKC,cAClC9S,EAAM9K,EAAI,EAAInN,KAAKob,IAAiB,KAAb0P,KAAKC,kBASnBC,KAAQP,EAEfO,EAAK/d,GATE,IASQ+d,EAAKpG,GACpBoG,EAAK9d,GAVE,IAUQ8d,EAAKnG,GACpBmG,EAAK7d,GAXE,IAWQ6d,EAAKN,GAEpBM,EAAKnG,IAZC,IAcFmG,EAAK9d,EAAI8d,EAAK3c,IAAM2c,EAAK3c,KAC3B2c,EAAKnG,GAAK7kB,KAAKkhB,IAAI8J,EAAKnG,KAEtBmG,EAAK/d,EAAI+d,EAAK3c,IAhBR,IAiBR2c,EAAKpG,IAAM5kB,KAAKkhB,IAAI8J,EAAKpG,KAEvBoG,EAAK/d,EAAI+d,EAAK3c,SAChB2c,EAAKpG,GAAK5kB,KAAKkhB,IAAI8J,EAAKpG,KAEtBoG,EAAK7d,EAAI6d,EAAK3c,IApBR,IAqBR2c,EAAKN,IAAM1qB,KAAKkhB,IAAI8J,EAAKN,KAEvBM,EAAK7d,EAAI6d,EAAK3c,SAChB2c,EAAKN,GAAK1qB,KAAKkhB,IAAI8J,EAAKN,oBAO9BG,QAEaI,qBAAqBL,kBCzE5B,kEAAQ,CAChB7pB,OAAQW,SAASwpB"}